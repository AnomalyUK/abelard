<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029</id>
  <updated>2016-01-21T00:35:21.100-08:00</updated>
  <category term="Java"/>
  <category term="Mockito"/>
  <category term="Spring"/>
  <category term="Groovy"/>
  <category term="JBoss Drools"/>
  <category term="Unit tests"/>
  <category term="Good practices"/>
  <category term="Google Guava"/>
  <category term="AST"/>
  <category term="AST transforms"/>
  <category term="ApplicationContext"/>
  <category term="Bitbucket"/>
  <category term="GitHub"/>
  <category term="JAXB"/>
  <category term="Mocks"/>
  <category term="SQL"/>
  <category term="SpringJUnit4ClassRunner"/>
  <category term="Apache Camel"/>
  <category term="BeanPostProcessor"/>
  <category term="Builder"/>
  <category term="DZone"/>
  <category term="Decision table"/>
  <category term="Gradle"/>
  <category term="Integration"/>
  <category term="Integration tests"/>
  <category term="JMS"/>
  <category term="JMSTemplate"/>
  <category term="Javascript"/>
  <category term="MarkupBuilder"/>
  <category term="Mercurial"/>
  <category term="Mockito Cookbook"/>
  <category term="RETURNS_DEEP_STUBS"/>
  <category term="Spies"/>
  <category term="Spock"/>
  <category term="XmlSlurper"/>
  <category term="jQuery"/>
  <category term="@Primary"/>
  <category term="AOP"/>
  <category term="Answer"/>
  <category term="Book review"/>
  <category term="Business rules"/>
  <category term="CSW"/>
  <category term="Calc"/>
  <category term="Category"/>
  <category term="Cluster size"/>
  <category term="Coherence"/>
  <category term="Composite"/>
  <category term="DF Private"/>
  <category term="DSL"/>
  <category term="Database"/>
  <category term="Dependency Injection"/>
  <category term="Design Pattern"/>
  <category term="Development"/>
  <category term="Excel"/>
  <category term="Garbage Collector"/>
  <category term="Garbage Collector Tuning"/>
  <category term="Generics"/>
  <category term="Guava Cache"/>
  <category term="Guava Predicate"/>
  <category term="Hamcrest"/>
  <category term="Hibernate"/>
  <category term="Inheritance"/>
  <category term="InvocationOnMock"/>
  <category term="JMX"/>
  <category term="JVM"/>
  <category term="Mixin"/>
  <category term="MockitoJUnitRunner"/>
  <category term="Pivotal"/>
  <category term="PowerMock"/>
  <category term="Quality"/>
  <category term="Refactoring"/>
  <category term="Refcard"/>
  <category term="Regexp"/>
  <category term="Remote server"/>
  <category term="Rete Algorithm"/>
  <category term="Ryszard Grzejszczak"/>
  <category term="Specification"/>
  <category term="StopWatch"/>
  <category term="Subject-Collaborators-Extension"/>
  <category term="TDD"/>
  <category term="WGUG"/>
  <category term="XML"/>
  <category term="XSD"/>
  <category term="XSLT"/>
  <category term="concurrency"/>
  <category term="extraInterfaces"/>
  <category term="git"/>
  <category term="namespace"/>
  <category term="property missing"/>
  <category term="schema"/>
  <category term="sources"/>
  <category term="spring-cloud"/>
  <category term="withSettings"/>
  <title type="text">Blog for coding addicts</title>
  <subtitle type="html">Java and other programming drugs for coding junkies :)</subtitle>
  <link rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/posts/default"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/"/>
  <link rel="hub" href="http://pubsubhubbub.appspot.com/"/>
  <link rel="next" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default?start-index=26&amp;max-results=25"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <generator version="7.00" uri="http://www.blogger.com">Blogger</generator>
  <openSearch:totalResults>42</openSearch:totalResults>
  <openSearch:startIndex>1</openSearch:startIndex>
  <openSearch:itemsPerPage>25</openSearch:itemsPerPage>
<entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-5096479893421708813</id>
  <published>2013-01-17T11:06:00.000-08:00</published>
  <updated>2013-01-17T11:06:09.331-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Bitbucket"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="git"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="GitHub"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mercurial"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="sources"/>
  <title type="text">New Too Much Coding repository!</title>
  <content type="html">Hi!&lt;br /&gt;&lt;br /&gt;As you know there is a code repository of &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src"&gt;Too Much Coding sources here at Bitbucket&lt;/a&gt;. If you don't like it you can also find the &lt;a href="https://github.com/marcingrzejszczak/too-much-coding"&gt;Too Much Coding sources at GitHub!&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Enjoy :)</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/5096479893421708813/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/01/new-too-much-coding-repository.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/5096479893421708813"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/5096479893421708813"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/01/new-too-much-coding-repository.html" title="New Too Much Coding repository!"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-4942867272099255672</id>
  <published>2013-01-23T03:48:00.003-08:00</published>
  <updated>2013-01-23T03:48:54.318-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="JBoss Drools"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Rete Algorithm"/>
  <title type="text">Drools - Rete Alogrithm explanation</title>
  <content type="html">Quite recently I have found &lt;a href="http://salaboy.com/2011/06/06/drools-reteoo-for-dummies-1-intro/"&gt;a very nice article about the Rete Algorithm.&lt;/a&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/4942867272099255672/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/01/drools-rete-alogrithm-explanation.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/4942867272099255672"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/4942867272099255672"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/01/drools-rete-alogrithm-explanation.html" title="Drools - Rete Alogrithm explanation"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-3554468896628542194</id>
  <published>2013-01-28T01:20:00.001-08:00</published>
  <updated>2013-01-28T01:20:09.682-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="concurrency"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Java"/>
  <title type="text">Concurrency in web applications</title>
  <content type="html">Nice article about &lt;a href="http://blog.atena.pl/zrownoleglenie-operacji-w-aplikacji-webowej-2"&gt;concurrency in web applications (in Polish)&lt;/a&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/3554468896628542194/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/01/concurrency-in-web-applications.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3554468896628542194"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3554468896628542194"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/01/concurrency-in-web-applications.html" title="Concurrency in web applications"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-2035570962107584702</id>
  <published>2013-02-03T13:28:00.005-08:00</published>
  <updated>2013-02-03T15:20:18.821-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Apache Camel"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Calc"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Decision table"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Excel"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="JBoss Drools"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Spring"/>
  <title type="text">Drools decision tables with Camel and Spring</title>
  <content type="html">&lt;script type="text/javascript"&gt;var dzone_style = '2';&lt;/script&gt;&lt;script language="javascript" src="http://widgets.dzone.com/links/widgets/zoneit.js"&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;Hi!&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;As I've shown it in my previous post &lt;a href="http://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html"&gt;JBoss Drools are a very useful rules engine&lt;/a&gt;. The only problem is that creating the rules in the Rule language might be pretty complicated for a non-technical person. That's why one can provide an easy way for creating business rules - decision tables created in a spreadsheet!&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;In the following example I will show you a really complicated business rule example converted to a decision table in a spreadsheet. As a backend we will have Drools, Camel and Spring.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;To begin with let us take a look at our imaginary business problem. Let us assume that we are running a business that focuses on selling products (either Medical or Electronic). We are shipping our products to several countries (PL, USA, GER, SWE, UK, ESP) and depending on the country there are different law regulations concerning the buyer's age. In some countries you can buy products when you are younger than in others. What is more depending on the country from which the buyer and the product comes from and on the quantity of products, the buyer might get a discount. As you can see there is a substantial number of conditions needed to be fullfield in this scenario (imagine the number of ifs needed to program this :P ).&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;Another problem would be the business side (as usual). Anybody who has been working on a project knows how fast the requirements are changing. If one entered all the rules in the code he would have to redeploy the software each time the requirements changed. That's why it is a good practice to divide the business logic from the code itself. Anyway, let's go back to our example.&lt;/div&gt;&lt;br /&gt;To begin with let us take a look at the spreadsheets (before that it is worth taking a look at the &lt;a href="http://docs.jboss.org/drools/release/5.2.0.Final/drools-expert-docs/html/ch06.html"&gt;JBoss website with precise description of how the decision table should look like&lt;/a&gt;):&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;The point of entry of our program is the first spreadsheet that checks if the given user should be granted with the possibility of buying a product (it will be better if you download the spreadsheets and play with them from Too Much Coding's repository at Bitbucket: &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/eeda79f74a4af30091490ab3507879254540e118/Drools/Decision%20table/src/main/resources/rules/user_table.xls?at=default"&gt;user_table.xls&lt;/a&gt; and &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/eeda79f74a4af30091490ab3507879254540e118/Drools/Decision%20table/src/main/resources/rules/product_table.xls?at=default"&gt;product_table.xls&lt;/a&gt;, or Github&lt;a href="https://github.com/marcingrzejszczak/too-much-coding/blob/master/Drools/Decision%20table/src/main/resources/rules/user_table.xls?raw=true"&gt; user_table.xls &lt;/a&gt;and &lt;a href="https://github.com/marcingrzejszczak/too-much-coding/blob/master/Drools/Decision%20table/src/main/resources/rules/product_table.xls?raw=true"&gt;product_table.xls&lt;/a&gt;):&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;user_table.xls (tables worksheet)&lt;/b&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-J5-tXPECwJI/UQ7TmutXq5I/AAAAAAAAAzU/3c9KrRFaZ5w/s1600/user_table.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="120" src="http://1.bp.blogspot.com/-J5-tXPECwJI/UQ7TmutXq5I/AAAAAAAAAzU/3c9KrRFaZ5w/s320/user_table.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Once the user has been approved he might get a discount:&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;product_table.xls (tables worksheet)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-v-fAUhcn4HI/UQ69XrrT06I/AAAAAAAAAy0/8fU1nropIhU/s1600/product_table.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="129" src="http://2.bp.blogspot.com/-v-fAUhcn4HI/UQ69XrrT06I/AAAAAAAAAy0/8fU1nropIhU/s320/product_table.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;product_table.xls (lists worksheet)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-_MkDqjqjuDU/UQ69mEuCy5I/AAAAAAAAAy8/u09czbpift0/s1600/user_table_lists.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="81" src="http://4.bp.blogspot.com/-_MkDqjqjuDU/UQ69mEuCy5I/AAAAAAAAAy8/u09czbpift0/s320/user_table_lists.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: justify;"&gt;As you can see in the images the business problem is quite complex. Each row represents a rule, and each column represents a condition. &lt;a href="http://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html"&gt;Do you remember the rules syntax from my recent post?&lt;/a&gt; So you would understand the hidden part of the spreadsheet that is right above the first visible row:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/--f9FvvQaAhM/UQ6-gcczcQI/AAAAAAAAAzM/GxGmoV6s3OE/s1600/product_table_header.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="71" src="http://2.bp.blogspot.com/--f9FvvQaAhM/UQ6-gcczcQI/AAAAAAAAAzM/GxGmoV6s3OE/s320/product_table_header.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;The rows from 2 to 6 represent some fixed configuration values such as rule set, imports (&lt;a href="http://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html"&gt; you've already seen that in my recent post&lt;/a&gt;) and functions. Next in row number 7 you can find the name of the RuleTable. Then in row number 8 you have in our scenario either a CONDITION or an ACTION - so in other words either the LHS or rhe RHS respectively. Row number 9 is both representation of types presented in the condition and the binding to a variable. In row number 10 we have the exact LHS condition. Row number 11 shows the label of columns. From row number 12 we have the rules one by one. You can find the spreadsheets in the sources.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Now let's take a look at the code. Let's start with taking a look at the schemas defining the Product and the User.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;Person.xsd&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"&amp;gt;&lt;br /&gt;    &amp;lt;xsd:include schemaLocation="user.xsd"/&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:element name="Product"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:complexType&amp;gt;&lt;br /&gt;            &amp;lt;xsd:sequence&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="Name" type="xsd:string"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="Type" type="ProductType"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="Price" type="xsd:double"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="CountryOfOrigin" type="CountryType"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="AdditionalInfo" type="xsd:string"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="Quantity" type="xsd:int"/&amp;gt;&lt;br /&gt;            &amp;lt;/xsd:sequence&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:complexType&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:element&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:simpleType name="ProductType"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:restriction base="xsd:string"&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="MEDICAL"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="ELECTRONIC"/&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:restriction&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:simpleType&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/xsd:schema&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;User.xsd&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"&amp;gt;&lt;br /&gt;    &amp;lt;xsd:include schemaLocation="product.xsd"/&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:element name="User"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:complexType&amp;gt;&lt;br /&gt;            &amp;lt;xsd:sequence&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="UserName" type="xsd:string"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="UserAge" type="xsd:int"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="UserCountry" type="CountryType"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="Decision" type="DecisionType"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="DecisionDescription" type="xsd:string"/&amp;gt;&lt;br /&gt;            &amp;lt;/xsd:sequence&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:complexType&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:element&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:simpleType name="CountryType"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:restriction base="xsd:string"&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="PL"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="USA"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="GER"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="SWE"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="UK"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="ESP"/&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:restriction&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:simpleType&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:simpleType name="DecisionType"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:restriction base="xsd:string"&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="ACCEPTED"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="REJECTED"/&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:restriction&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:simpleType&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/xsd:schema&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Due to the fact that we are using maven we may use a plugin that will convert the XSD into Java classes.&lt;br /&gt;&lt;br /&gt;part of the &lt;b&gt;pom.xml  &lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt; &amp;lt;build&amp;gt;&lt;br /&gt;        &amp;lt;pluginManagement&amp;gt;&lt;br /&gt;            &amp;lt;plugins&amp;gt;&lt;br /&gt;                &amp;lt;plugin&amp;gt;&lt;br /&gt;                    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br /&gt;                    &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;                    &amp;lt;version&amp;gt;2.5.1&amp;lt;/version&amp;gt;&lt;br /&gt;                &amp;lt;/plugin&amp;gt;&lt;br /&gt;            &amp;lt;/plugins&amp;gt;&lt;br /&gt;        &amp;lt;/pluginManagement&amp;gt;&lt;br /&gt;        &amp;lt;plugins&amp;gt;&lt;br /&gt;            &amp;lt;plugin&amp;gt;&lt;br /&gt;                &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;&lt;br /&gt;                &amp;lt;artifactId&amp;gt;jaxb2-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;                &amp;lt;version&amp;gt;1.5&amp;lt;/version&amp;gt;&lt;br /&gt;                &amp;lt;executions&amp;gt;&lt;br /&gt;                    &amp;lt;execution&amp;gt;&lt;br /&gt;                        &amp;lt;id&amp;gt;xjc&amp;lt;/id&amp;gt;&lt;br /&gt;                        &amp;lt;goals&amp;gt;&lt;br /&gt;                            &amp;lt;goal&amp;gt;xjc&amp;lt;/goal&amp;gt;&lt;br /&gt;                        &amp;lt;/goals&amp;gt;&lt;br /&gt;                    &amp;lt;/execution&amp;gt;&lt;br /&gt;                &amp;lt;/executions&amp;gt;&lt;br /&gt;                &amp;lt;configuration&amp;gt;&lt;br /&gt;                    &amp;lt;packageName&amp;gt;pl.grzejszczak.marcin.drools.decisiontable.model&amp;lt;/packageName&amp;gt;&lt;br /&gt;                    &amp;lt;schemaDirectory&amp;gt;${project.basedir}/src/main/resources/xsd&amp;lt;/schemaDirectory&amp;gt;&lt;br /&gt;                &amp;lt;/configuration&amp;gt;&lt;br /&gt;            &amp;lt;/plugin&amp;gt;&lt;br /&gt;        &amp;lt;/plugins&amp;gt;&lt;br /&gt;    &amp;lt;/build&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Thanks to this plugin we have our generated by JAXB classes in the &lt;b&gt;pl.grzejszczak.marcin.decisiontable.model&lt;/b&gt; package.&lt;br /&gt;&lt;br /&gt;Now off to the drools-context.xml file where we've defined all the necessary beans as far as Drools are concerned:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;beans xmlns="http://www.springframework.org/schema/beans"&lt;br /&gt;       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;       xmlns:drools="http://drools.org/schema/drools-spring"&lt;br /&gt;       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&lt;br /&gt;  http://drools.org/schema/drools-spring http://drools.org/schema/drools-spring.xsd"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!-- Grid Node identifier that is registered in the CamelContext --&amp;gt;&lt;br /&gt;    &amp;lt;drools:grid-node id="node1"/&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;drools:kbase id="productsKBase" node="node1"&amp;gt;&lt;br /&gt;        &amp;lt;drools:resources&amp;gt;&lt;br /&gt;            &amp;lt;drools:resource type="DTABLE" source="classpath:rules/product_table.xls"/&amp;gt;&lt;br /&gt;        &amp;lt;/drools:resources&amp;gt;&lt;br /&gt;    &amp;lt;/drools:kbase&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;drools:ksession id="productsKSession" name="productsKSession" type="stateless" kbase="productsKBase" node="node1"/&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;drools:kbase id="usersKBase" node="node1"&amp;gt;&lt;br /&gt;        &amp;lt;drools:resources&amp;gt;&lt;br /&gt;            &amp;lt;drools:resource type="DTABLE" source="classpath:rules/user_table.xls"/&amp;gt;&lt;br /&gt;        &amp;lt;/drools:resources&amp;gt;&lt;br /&gt;    &amp;lt;/drools:kbase&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;drools:ksession id="usersKSession" name="usersKSession" type="stateless" kbase="usersKBase" node="node1"/&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/beans&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;div style="text-align: justify;"&gt;As you can see in comparison to &lt;a href="http://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html"&gt;the application context from the recent post &lt;/a&gt;there are some differences. First instead of passing the DRL file as the resource inside the knowledge base we are providing the Decision table (&lt;span style="font-family: Courier New, Courier, monospace;"&gt;DTABLE&lt;/span&gt;). I've decided to pass in two seperate files but you can provide one file with several worksheets and access those worksheets (through the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;decisiontable-conf&lt;/span&gt; element). Also there is an additional element called &lt;span style="font-family: Courier New, Courier, monospace;"&gt;node&lt;/span&gt;. We have to choose an implementation of the Node interface (Execution, Grid...) for the Camel route to work properly as you will see in a couple of seconds in the Spring application context file.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;applicationContext.xml&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;beans xmlns="http://www.springframework.org/schema/beans"&lt;br /&gt;       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;       xmlns:camel="http://camel.apache.org/schema/spring"&lt;br /&gt;       xmlns:context="http://www.springframework.org/schema/context"&lt;br /&gt;       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&lt;br /&gt;                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&lt;br /&gt;                           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring-2.8.0.xsd"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;import resource="classpath:drools-context.xml"/&amp;gt;&lt;br /&gt;    &amp;lt;!-- Show Spring where to search for the beans (in which packages) --&amp;gt;&lt;br /&gt;    &amp;lt;context:component-scan base-package="pl.grzejszczak.marcin.drools.decisiontable" /&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;camel:camelContext id="camelContext"&amp;gt;&lt;br /&gt;        &amp;lt;camel:route id="acceptanceRoute"&amp;gt;&lt;br /&gt;            &amp;lt;camel:from uri="direct:acceptanceRoute"/&amp;gt;&lt;br /&gt;            &amp;lt;camel:to uri="drools:node1/usersKSession"/&amp;gt;&lt;br /&gt;        &amp;lt;/camel:route&amp;gt;&lt;br /&gt;        &amp;lt;camel:route id="discountRoute"&amp;gt;&lt;br /&gt;            &amp;lt;camel:from uri="direct:discountRoute"/&amp;gt;&lt;br /&gt;            &amp;lt;camel:to uri="drools:node1/productsKSession"/&amp;gt;&lt;br /&gt;        &amp;lt;/camel:route&amp;gt;&lt;br /&gt;    &amp;lt;/camel:camelContext&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/beans&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div style="text-align: justify;"&gt;As you can see in order to access the Drools Camel Component we have to provide the &lt;b&gt;node &lt;/b&gt;through which we will access the proper&lt;b&gt; knowledge session&lt;/b&gt;. We have defined two routes - the first one ends at the Drools component that accesses the users knowledge session and the other the products knowledge session.&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;We have a ProductService interface implementation called ProductServiceImpl that given an input User and Product objects pass them through the Camel's Producer Template to two Camel routes each ending at the Drools components. The concept behind this product service is that we are first processing the User if he can even buy the software and then we are checking what kind of a discount he would receive. From the service's point of view in fact we are just sending the object out and waiting for the response. Finally having reveived the response we are passing the User and the Product to the Financial Service implementation that will bill the user for the products that he has bought or reject his offer if needed.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;ProductServiceImpl.java&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package pl.grzejszczak.marcin.drools.decisiontable.service;&lt;br /&gt;&lt;br /&gt;import org.apache.camel.CamelContext;&lt;br /&gt;import org.slf4j.Logger;&lt;br /&gt;import org.slf4j.LoggerFactory;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.stereotype.Component;&lt;br /&gt;import pl.grzejszczak.marcin.drools.decisiontable.model.Product;&lt;br /&gt;import pl.grzejszczak.marcin.drools.decisiontable.model.User;&lt;br /&gt;&lt;br /&gt;import static com.google.common.collect.Lists.newArrayList;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created with IntelliJ IDEA.&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 14.01.13&lt;br /&gt; */&lt;br /&gt;@Component("productServiceImpl")&lt;br /&gt;public class ProductServiceImpl implements ProductService {&lt;br /&gt;&lt;br /&gt;    private static final Logger LOGGER = LoggerFactory.getLogger(ProductServiceImpl.class);&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    CamelContext camelContext;&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    FinancialService financialService;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void runProductLogic(User user, Product product) {&lt;br /&gt;        LOGGER.debug("Running product logic - first acceptance Route, then discount Route");&lt;br /&gt;        camelContext.createProducerTemplate().sendBody("direct:acceptanceRoute", newArrayList(user, product));&lt;br /&gt;        camelContext.createProducerTemplate().sendBody("direct:discountRoute", newArrayList(user, product));&lt;br /&gt;        financialService.processOrder(user, product);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="brush:java"&gt;&lt;/pre&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style="text-align: justify;"&gt;Another crucial thing to remember about is that the Camel Drools Component requires the Command object as the input. As you can see, in the body we are sending a list of objects (and these are not Command objects). I did it on purpose since in my opinion it is better not to bind our code to a concrete solution. What if we find out that there is a better solution than Drools? Will we change all the code that we have created or just change the Camel route to point at our new solution? That's why Camel has the TypeConverters. We have our own here&amp;nbsp;as well. First of all let's take a look at the implementation.&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="text-align: justify;"&gt;&lt;b&gt;ProductTypeConverter.java&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package pl.grzejszczak.marcin.drools.decisiontable.converter;&lt;br /&gt;&lt;br /&gt;import org.apache.camel.Converter;&lt;br /&gt;import org.drools.command.Command;&lt;br /&gt;import org.drools.command.CommandFactory;&lt;br /&gt;import org.slf4j.Logger;&lt;br /&gt;import org.slf4j.LoggerFactory;&lt;br /&gt;import pl.grzejszczak.marcin.drools.decisiontable.model.Product;&lt;br /&gt;&lt;br /&gt;import java.util.List;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created with IntelliJ IDEA.&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 30.01.13&lt;br /&gt; * Time: 21:42&lt;br /&gt; */&lt;br /&gt;@Converter&lt;br /&gt;public class ProductTypeConverter {&lt;br /&gt;&lt;br /&gt;    private static final Logger LOGGER = LoggerFactory.getLogger(ProductTypeConverter.class);&lt;br /&gt;&lt;br /&gt;    @Converter&lt;br /&gt;    public static Command toCommandFromList(List inputList) {&lt;br /&gt;        LOGGER.debug("Executing ProductTypeConverter's toCommandFromList method");&lt;br /&gt;        return CommandFactory.newInsertElements(inputList);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Converter&lt;br /&gt;    public static Command toCommand(Product product) {&lt;br /&gt;        LOGGER.debug("Executing ProductTypeConverter's toCommand method");&lt;br /&gt;        return CommandFactory.newInsert(product);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;span style="text-align: justify;"&gt;There is a good tutorial on TypeConverters on the &lt;a href="http://camel.apache.org/type-converter.html"&gt;Camel website&lt;/a&gt; - if you needed some more indepth info about it. Anyway, we are annotating our class and the functions used to convert different types into one another. What is important here is that we are showing Camel how to convert a list and a single product to Commands. Due to type erasure this will work regardless of the provided type that is why even though we are giving a list of Product &amp;nbsp;and User, the toCommandFromList function will get executed.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="text-align: justify;"&gt;In addition to this in order for the type converter to work we have to provide the fully quallified name of our class (FQN) in the&amp;nbsp;&lt;b&gt;/META-INF/services/org/apache/camel/TypeConverter&lt;/b&gt; file.&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="text-align: justify;"&gt;&lt;b&gt;TypeConverter&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter&lt;/pre&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;In order to properly test our functionality one should write quite a few tests that would verify the rules. A pretty good way would be to have input files stored in the test resources folders that are passed to the rule engine and then the result would be compared against the verified output (unfortunately it is rather impossible to make the business side develop such a reference set of outputs). Anyway let's take a look at the unit test that verifies only a few of the rules and the logs that are produced from running those rules:&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="text-align: justify;"&gt;&lt;b&gt;ProductServiceImplTest.java&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package pl.grzejszczak.marcin.drools.decisiontable.service.drools;&lt;br /&gt;&lt;br /&gt;import org.apache.commons.lang.builder.ReflectionToStringBuilder;&lt;br /&gt;import org.apache.commons.lang.builder.ToStringStyle;&lt;br /&gt;import org.junit.Test;&lt;br /&gt;import org.junit.runner.RunWith;&lt;br /&gt;import org.slf4j.Logger;&lt;br /&gt;import org.slf4j.LoggerFactory;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.test.context.ContextConfiguration;&lt;br /&gt;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&lt;br /&gt;import pl.grzejszczak.marcin.drools.decisiontable.model.*;&lt;br /&gt;import pl.grzejszczak.marcin.drools.decisiontable.service.ProductService;&lt;br /&gt;&lt;br /&gt;import static org.junit.Assert.assertEquals;&lt;br /&gt;import static org.junit.Assert.assertTrue;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created with IntelliJ IDEA.&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 03.02.13&lt;br /&gt; * Time: 16:06&lt;br /&gt; */&lt;br /&gt;@RunWith(SpringJUnit4ClassRunner.class)&lt;br /&gt;@ContextConfiguration("classpath:applicationContext.xml")&lt;br /&gt;public class ProductServiceImplTest {&lt;br /&gt;&lt;br /&gt;    private static final Logger LOGGER = LoggerFactory.getLogger(ProductServiceImplTest.class);&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    ProductService objectUnderTest;&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void testRunProductLogicUserPlUnderageElectronicCountryPL() throws Exception {&lt;br /&gt;        int initialPrice = 1000;&lt;br /&gt;        int userAge = 6;&lt;br /&gt;        int quantity = 10;&lt;br /&gt;&lt;br /&gt;        User user = createUser("Smith", CountryType.PL, userAge);&lt;br /&gt;        Product product = createProduct("Electronic", initialPrice, CountryType.PL, ProductType.ELECTRONIC, quantity);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        objectUnderTest.runProductLogic(user, product);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        assertTrue(product.getPrice() == initialPrice);&lt;br /&gt;        assertEquals(DecisionType.REJECTED, user.getDecision());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void testRunProductLogicUserPlHighAgeElectronicCountryPLLowQuantity() throws Exception {&lt;br /&gt;        int initialPrice = 1000;&lt;br /&gt;        int userAge = 19;&lt;br /&gt;        int quantity = 1;&lt;br /&gt;&lt;br /&gt;        User user = createUser("Smith", CountryType.PL, userAge);&lt;br /&gt;        Product product = createProduct("Electronic", initialPrice, CountryType.PL, ProductType.ELECTRONIC, quantity);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        objectUnderTest.runProductLogic(user, product);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        assertTrue(product.getPrice() == initialPrice);&lt;br /&gt;        assertEquals(DecisionType.ACCEPTED, user.getDecision());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void testRunProductLogicUserPlHighAgeElectronicCountryPLHighQuantity() throws Exception {&lt;br /&gt;        int initialPrice = 1000;&lt;br /&gt;        int userAge = 19;&lt;br /&gt;        int quantity = 8;&lt;br /&gt;&lt;br /&gt;        User user = createUser("Smith", CountryType.PL, userAge);&lt;br /&gt;        Product product = createProduct("Electronic", initialPrice, CountryType.PL, ProductType.ELECTRONIC, quantity);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        objectUnderTest.runProductLogic(user, product);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;        double expectedDiscount = 0.1;&lt;br /&gt;&lt;br /&gt;        assertTrue(product.getPrice() == initialPrice * (1 - expectedDiscount));&lt;br /&gt;        assertEquals(DecisionType.ACCEPTED, user.getDecision());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void testRunProductLogicUserUsaLowAgeElectronicCountryPLHighQuantity() throws Exception {&lt;br /&gt;        int initialPrice = 1000;&lt;br /&gt;        int userAge = 19;&lt;br /&gt;        int quantity = 8;&lt;br /&gt;&lt;br /&gt;        User user = createUser("Smith", CountryType.USA, userAge);&lt;br /&gt;        Product product = createProduct("Electronic", initialPrice, CountryType.PL, ProductType.ELECTRONIC, quantity);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        objectUnderTest.runProductLogic(user, product);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        assertTrue(product.getPrice() == initialPrice);&lt;br /&gt;        assertEquals(DecisionType.REJECTED, user.getDecision());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void testRunProductLogicUserUsaHighAgeMedicalCountrySWELowQuantity() throws Exception {&lt;br /&gt;        int initialPrice = 1000;&lt;br /&gt;        int userAge = 22;&lt;br /&gt;        int quantity = 4;&lt;br /&gt;&lt;br /&gt;        User user = createUser("Smith", CountryType.USA, userAge);&lt;br /&gt;        Product product = createProduct("Some name", initialPrice, CountryType.SWE, ProductType.MEDICAL, quantity);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        objectUnderTest.runProductLogic(user, product);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        assertTrue(product.getPrice() == initialPrice);&lt;br /&gt;        assertEquals(DecisionType.ACCEPTED, user.getDecision());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void testRunProductLogicUserUsaHighAgeMedicalCountrySWEHighQuantity() throws Exception {&lt;br /&gt;        int initialPrice = 1000;&lt;br /&gt;        int userAge = 22;&lt;br /&gt;        int quantity = 8;&lt;br /&gt;&lt;br /&gt;        User user = createUser("Smith", CountryType.USA, userAge);&lt;br /&gt;        Product product = createProduct("Some name", initialPrice, CountryType.SWE, ProductType.MEDICAL, quantity);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;&lt;br /&gt;        objectUnderTest.runProductLogic(user, product);&lt;br /&gt;&lt;br /&gt;        printInputs(user, product);&lt;br /&gt;        double expectedDiscount = 0.25;&lt;br /&gt;&lt;br /&gt;        assertTrue(product.getPrice() == initialPrice * (1 - expectedDiscount));&lt;br /&gt;        assertEquals(DecisionType.ACCEPTED, user.getDecision());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private void printInputs(User user, Product product) {&lt;br /&gt;        LOGGER.debug(ReflectionToStringBuilder.reflectionToString(user, ToStringStyle.MULTI_LINE_STYLE));&lt;br /&gt;        LOGGER.debug(ReflectionToStringBuilder.reflectionToString(product, ToStringStyle.MULTI_LINE_STYLE));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private User createUser(String name, CountryType countryType, int userAge){&lt;br /&gt;        User user = new User();&lt;br /&gt;        user.setUserName(name);&lt;br /&gt;        user.setUserCountry(countryType);&lt;br /&gt;        user.setUserAge(userAge);&lt;br /&gt;        return user;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private Product createProduct(String name, double price, CountryType countryOfOrigin, ProductType productType, int quantity){&lt;br /&gt;        Product product = new Product();&lt;br /&gt;        product.setPrice(price);&lt;br /&gt;        product.setCountryOfOrigin(countryOfOrigin);&lt;br /&gt;        product.setName(name);&lt;br /&gt;        product.setType(productType);&lt;br /&gt;        product.setQuantity(quantity);&lt;br /&gt;        return product;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;span style="text-align: justify;"&gt;Of course the log.debugs in the tests are totally redundant but I wanted you to quickly see that the rules are operational :) Sorry for the length of the logs but I wrote a few tests to show different combinations of rules (in fact it's better too have too many logs than the other way round :) )&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@1d48043[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=6&lt;br /&gt;  userCountry=PL&lt;br /&gt;  decision=&amp;lt;null&amp;gt;&lt;br /&gt;  decisionDescription=&amp;lt;null&amp;gt;&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1e8f2a0[&lt;br /&gt;  name=Electronic&lt;br /&gt;  type=ELECTRONIC&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=PL&lt;br /&gt;  additionalInfo=&amp;lt;null&amp;gt;&lt;br /&gt;  quantity=10&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Sorry, according to your age (&amp;lt; 18) and country (PL) you can't buy this product&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:29 Sorry, user has been rejected...&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@1d48043[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=6&lt;br /&gt;  userCountry=PL&lt;br /&gt;  decision=REJECTED&lt;br /&gt;  decisionDescription=Sorry, according to your age (&amp;lt; 18) and country (PL) you can't buy this product&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1e8f2a0[&lt;br /&gt;  name=Electronic&lt;br /&gt;  type=ELECTRONIC&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=PL&lt;br /&gt;  additionalInfo=&amp;lt;null&amp;gt;&lt;br /&gt;  quantity=10&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@b28f30[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=19&lt;br /&gt;  userCountry=PL&lt;br /&gt;  decision=&amp;lt;null&amp;gt;&lt;br /&gt;  decisionDescription=&amp;lt;null&amp;gt;&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@d6a0e0[&lt;br /&gt;  name=Electronic&lt;br /&gt;  type=ELECTRONIC&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=PL&lt;br /&gt;  additionalInfo=&amp;lt;null&amp;gt;&lt;br /&gt;  quantity=1&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you have successfully bought the product&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Sorry, no discount will be granted.&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:25 User has been approved - processing the order...&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@b28f30[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=19&lt;br /&gt;  userCountry=PL&lt;br /&gt;  decision=ACCEPTED&lt;br /&gt;  decisionDescription=Congratulations, you have successfully bought the product&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@d6a0e0[&lt;br /&gt;  name=Electronic&lt;br /&gt;  type=ELECTRONIC&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=PL&lt;br /&gt;  additionalInfo=Sorry, no discount will be granted.&lt;br /&gt;  quantity=1&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@14510ac[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=19&lt;br /&gt;  userCountry=PL&lt;br /&gt;  decision=&amp;lt;null&amp;gt;&lt;br /&gt;  decisionDescription=&amp;lt;null&amp;gt;&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1499616[&lt;br /&gt;  name=Electronic&lt;br /&gt;  type=ELECTRONIC&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=PL&lt;br /&gt;  additionalInfo=&amp;lt;null&amp;gt;&lt;br /&gt;  quantity=8&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you have successfully bought the product&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations - you've been granted a 10% discount!&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:25 User has been approved - processing the order...&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@14510ac[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=19&lt;br /&gt;  userCountry=PL&lt;br /&gt;  decision=ACCEPTED&lt;br /&gt;  decisionDescription=Congratulations, you have successfully bought the product&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1499616[&lt;br /&gt;  name=Electronic&lt;br /&gt;  type=ELECTRONIC&lt;br /&gt;  price=900.0&lt;br /&gt;  countryOfOrigin=PL&lt;br /&gt;  additionalInfo=Congratulations - you've been granted a 10% discount!&lt;br /&gt;  quantity=8&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@17667bd[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=19&lt;br /&gt;  userCountry=USA&lt;br /&gt;  decision=&amp;lt;null&amp;gt;&lt;br /&gt;  decisionDescription=&amp;lt;null&amp;gt;&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@ad9f5d[&lt;br /&gt;  name=Electronic&lt;br /&gt;  type=ELECTRONIC&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=PL&lt;br /&gt;  additionalInfo=&amp;lt;null&amp;gt;&lt;br /&gt;  quantity=8&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Sorry, according to your age (&amp;lt; 18) and country (USA) you can't buy this product&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:29 Sorry, user has been rejected...&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@17667bd[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=19&lt;br /&gt;  userCountry=USA&lt;br /&gt;  decision=REJECTED&lt;br /&gt;  decisionDescription=Sorry, according to your age (&amp;lt; 18) and country (USA) you can't buy this product&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@ad9f5d[&lt;br /&gt;  name=Electronic&lt;br /&gt;  type=ELECTRONIC&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=PL&lt;br /&gt;  additionalInfo=&amp;lt;null&amp;gt;&lt;br /&gt;  quantity=8&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@9ff588[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=22&lt;br /&gt;  userCountry=USA&lt;br /&gt;  decision=&amp;lt;null&amp;gt;&lt;br /&gt;  decisionDescription=&amp;lt;null&amp;gt;&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1b0d2d0[&lt;br /&gt;  name=Some name&lt;br /&gt;  type=MEDICAL&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=SWE&lt;br /&gt;  additionalInfo=&amp;lt;null&amp;gt;&lt;br /&gt;  quantity=4&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you have successfully bought the product&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:25 User has been approved - processing the order...&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@9ff588[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=22&lt;br /&gt;  userCountry=USA&lt;br /&gt;  decision=ACCEPTED&lt;br /&gt;  decisionDescription=Congratulations, you have successfully bought the product&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@1b0d2d0[&lt;br /&gt;  name=Some name&lt;br /&gt;  type=MEDICAL&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=SWE&lt;br /&gt;  additionalInfo=&amp;lt;null&amp;gt;&lt;br /&gt;  quantity=4&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@1b27882[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=22&lt;br /&gt;  userCountry=USA&lt;br /&gt;  decision=&amp;lt;null&amp;gt;&lt;br /&gt;  decisionDescription=&amp;lt;null&amp;gt;&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@5b84b[&lt;br /&gt;  name=Some name&lt;br /&gt;  type=MEDICAL&lt;br /&gt;  price=1000.0&lt;br /&gt;  countryOfOrigin=SWE&lt;br /&gt;  additionalInfo=&amp;lt;null&amp;gt;&lt;br /&gt;  quantity=8&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductServiceImpl:31 Running product logic - first acceptance Route, then discount Route&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you have successfully bought the product&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.converter.ProductTypeConverter:25 Executing ProductTypeConverter's toCommandFromList method&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.ProductService:8 Congratulations, you are granted a discount&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.FinancialServiceImpl:25 User has been approved - processing the order...&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:150 pl.grzejszczak.marcin.drools.decisiontable.model.User@1b27882[&lt;br /&gt;  userName=Smith&lt;br /&gt;  userAge=22&lt;br /&gt;  userCountry=USA&lt;br /&gt;  decision=ACCEPTED&lt;br /&gt;  decisionDescription=Congratulations, you have successfully bought the product&lt;br /&gt;]&lt;br /&gt;pl.grzejszczak.marcin.drools.decisiontable.service.drools.ProductServiceImplTest:151 pl.grzejszczak.marcin.drools.decisiontable.model.Product@5b84b[&lt;br /&gt;  name=Some name&lt;br /&gt;  type=MEDICAL&lt;br /&gt;  price=750.0&lt;br /&gt;  countryOfOrigin=SWE&lt;br /&gt;  additionalInfo=Congratulations, you are granted a discount&lt;br /&gt;  quantity=8&lt;br /&gt;]&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;span style="text-align: justify;"&gt;In this post I've presented how you can push some of your developing work to your BA by giving him a tool which he can be able to work woth - the Decision Tables in a spreadsheet. What is more now you will now how to integrate Drools with Camel. Hopefully you will see how you can simplify (thus minimize the cost of implementing and supporting) the implementation of business rules bearing in mind how prone to changes they are. I hope that this example will even better illustrate how difficult it would be to implement all the business rules in Java than in the &lt;a href="http://toomuchcoding.blogspot.com/2013/01/drools-integration-with-spring-vs.html"&gt;previous post about Drools.&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="text-align: justify;"&gt;If you have any experience with Drools in terms of decision tables, integration with Spring and Camel please feel free to leave a comment - let's have a discussion on that :)&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="text-align: justify;"&gt;All the code is available at Too Much Coding repository at &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/eeda79f74a4af30091490ab3507879254540e118/Drools/Decision%20table?at=default"&gt;Bitbucket &lt;/a&gt;and &lt;a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Drools/Decision%20table"&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="text-align: justify;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="text-align: justify;"&gt;Cheers!&lt;/span&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/2035570962107584702/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/02/drools-decision-tables-with-camel-and.html#comment-form" title="1 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/2035570962107584702"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/2035570962107584702"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/02/drools-decision-tables-with-camel-and.html" title="Drools decision tables with Camel and Spring"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-J5-tXPECwJI/UQ7TmutXq5I/AAAAAAAAAzU/3c9KrRFaZ5w/s72-c/user_table.png" height="72" width="72"/>
  <thr:total>1</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-1609855364587063986</id>
  <published>2013-03-30T15:09:00.001-07:00</published>
  <updated>2013-03-31T15:57:19.034-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Builder"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Decision table"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="DSL"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Gradle"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Groovy"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Integration"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="JBoss Drools"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="MarkupBuilder"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="property missing"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="XmlSlurper"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="XSLT"/>
  <title type="text">Execution of Groovy scripts from Java - XmlSlurper and MarkupBuilder in mapping issues</title>
  <content type="html">&lt;script type="text/javascript"&gt;var dzone_style = '2';&lt;/script&gt;&lt;script language="javascript" src="http://widgets.dzone.com/links/widgets/zoneit.js"&gt;&lt;/script&gt;&lt;br /&gt;&lt;h2&gt;Problem with mappings&lt;/h2&gt;&lt;br /&gt;In our project we came across a really big problem related to mapping. Having two systems that initially were defined by the BA to be somehwat simillar we have chosen the simple XSLT (done through Altova Mapforce) of the input message to the output one.&lt;br /&gt;&lt;br /&gt;Afterwards it turned out that the functions required to perform a mapping are becoming enormous. An example of such a mapping is:&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;From the input message take a list of Cars iterate over it and find a Car whose field "prodcutionDate" is the lowest and the attribute "make" is equal to "Honda" and as the output return the "saleDate"&lt;/blockquote&gt;So in order to map it we decided to move to JBoss Drools. The &lt;a href="http://toomuchcoding.blogspot.com/2013/02/drools-decision-tables-with-camel-and.html"&gt;decision tables&lt;/a&gt; were out of question since the logic was to complex and customized to be placed in the spreadsheet so we coded everything in the DRL files. Soon the rules got really big and some of our developers were forced to spend plenty of time on constant recreation of rules stated by the BA.&lt;br /&gt;&lt;br /&gt;Out of frustration and after having seen all the amazing things at the&amp;nbsp;&lt;a href="http://2013.33degree.org/"&gt;33rd degree conference&lt;/a&gt; I decided to start finding solutions to my problems which were:&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;The DRL files are big and started to become unmaintainable (for a single field we had for example 4 rules)&lt;/li&gt;&lt;li&gt;Since the BA has never coded a single Drools rule / XSLT &amp;nbsp;in his life adding a simple if... else... statement for him is not a problem&lt;/li&gt;&lt;li&gt;The BA has to wait for the mapping implementation by the devs until he can test it&lt;/li&gt;&lt;li&gt;The devs are spending far too much time on coding the mapping rules instead of developing other features&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;After stating these problems a research regarding mapping frameworks took place and one of the concepts that I began working on was trying to create the mapping in Groovy. Since Groovy (thanks to for example PropertyMissing and MethodMissing) is a perfect language for creating a DSL I decided to start right away. The only two things I had to remember about were:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;The current application is written purely in Java&lt;/li&gt;&lt;li&gt;The mapping code (in order to perform fast testing) has to be detached from the application as such - it can't be compiled during deployment because we want to have the possibility of frequent substitutions of the mappings&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;h2&gt;Project structure&amp;nbsp;&lt;/h2&gt;&lt;br /&gt;Having defined the language, the constraints I created the following solution:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-LUqaZQkqom4/UVdMZkiW7RI/AAAAAAAABDc/f3sRJ9fF6AM/s1600/Project+structure.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://2.bp.blogspot.com/-LUqaZQkqom4/UVdMZkiW7RI/AAAAAAAABDc/f3sRJ9fF6AM/s320/Project+structure.png" width="255" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;The project structure&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;As you can see the project structure is very simple. To begin with it is built in &lt;b&gt;Gradle&lt;/b&gt;. The main function can be found in the &lt;b&gt;XmlTransformer.java&lt;/b&gt;. The flow is such that the &lt;b&gt;TransformerFactory&lt;/b&gt;&amp;nbsp;creates a &lt;b&gt;Transformer&lt;/b&gt;&amp;nbsp;basing on the Groovy script that came out of the &lt;b&gt;ScriptFactory &lt;/b&gt;(in our project for different types of products that we distinguish by a field in the XML file, we have different DRL files). The Groovy scripts are residing in the classpath in the &lt;b&gt;/groovy/&lt;/b&gt; folder (of course at the end of the day those scripts should be placed outside any jars).&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;In the &lt;b&gt;build.gradle&lt;/b&gt;&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:groovy"&gt;apply plugin: 'java'&lt;br /&gt;&lt;br /&gt;group = 'com.blogspot.toomuchcoding'&lt;br /&gt;version = '1.0'&lt;br /&gt;&lt;br /&gt;repositories {&lt;br /&gt;    mavenCentral()&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;dependencies {&lt;br /&gt;    compile 'org.codehaus.groovy:groovy-all:2.0.5'&lt;br /&gt;    compile 'org.slf4j:slf4j-log4j12:1.7.2'&lt;br /&gt;    compile 'log4j:log4j:1.2.16'&lt;br /&gt;    compile 'com.google.guava:guava:14.0'&lt;br /&gt;&lt;br /&gt;    testCompile group: 'junit', name: 'junit', version: '4.+'&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task(executeMain, dependsOn: 'classes', type: JavaExec) {&lt;br /&gt;    main = 'com.blogspot.toomuchcoding.XmlTransformer'&lt;br /&gt;    classpath = sourceSets.main.runtimeClasspath&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;we can see that there is no groovy plugin -&amp;nbsp;it has been done deliberately since we don't want our scripts to be compiled. Now let's take a look at the logic behind the TransformerFactory that compiles the Groovy script. What is really important is the fact that our Groovy class implements an interface created in our Java project - we want from the Java point of view to have no problems with execution of the Groovy code.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;b&gt;TransformerFactoryImpl.java&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.factory;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.transformer.Transformer;&lt;br /&gt;import com.google.common.io.Resources;&lt;br /&gt;import groovy.util.GroovyScriptEngine;&lt;br /&gt;import org.slf4j.Logger;&lt;br /&gt;import org.slf4j.LoggerFactory;&lt;br /&gt;&lt;br /&gt;import java.io.File;&lt;br /&gt;import java.net.URL;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created with IntelliJ IDEA.&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 22.03.13&lt;br /&gt; * Time: 23:54&lt;br /&gt; */&lt;br /&gt;public class TransformerFactoryImpl implements TransformerFactory&amp;lt;String, String&amp;gt; {&lt;br /&gt;    private static final String GROOVY_SCRIPTS_CLASSPATH = "groovy/";&lt;br /&gt;    private static Logger LOGGER = LoggerFactory.getLogger(TransformerFactoryImpl.class);&lt;br /&gt;&lt;br /&gt;    private ScriptFactory scriptFactory;&lt;br /&gt;    private GroovyScriptEngine groovyScriptEngine;&lt;br /&gt;&lt;br /&gt;    public TransformerFactoryImpl(ScriptFactory scriptFactory) {&lt;br /&gt;        this.scriptFactory = scriptFactory;&lt;br /&gt;        try {&lt;br /&gt;            groovyScriptEngine = new GroovyScriptEngine(GROOVY_SCRIPTS_CLASSPATH);&lt;br /&gt;        } catch (IOException e) {&lt;br /&gt;            LOGGER.error("Exception occurred while trying to create the Groovy script engine", e);&lt;br /&gt;            throw new RuntimeException(e);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public Transformer&amp;lt;String, String&amp;gt; createTransformer() {&lt;br /&gt;        Transformer&amp;lt;String, String&amp;gt; transformerFromScript = null;&lt;br /&gt;        try {&lt;br /&gt;            File scriptFile = scriptFactory.createScript();&lt;br /&gt;            URL scriptAsAClasspathResource = Resources.getResource(GROOVY_SCRIPTS_CLASSPATH + scriptFile.getName());&lt;br /&gt;            Class classFromScript = groovyScriptEngine.loadScriptByName(scriptAsAClasspathResource.getFile());&lt;br /&gt;            transformerFromScript = (Transformer&amp;lt;String, String&amp;gt;) classFromScript.newInstance();&lt;br /&gt;        } catch (Exception e) {&lt;br /&gt;            LOGGER.error("Exception occurred while trying to execute Groovy script", e);&lt;br /&gt;        }&lt;br /&gt;        return transformerFromScript;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;A &lt;b&gt;GroovyScriptEngine&lt;/b&gt;&amp;nbsp;is used to load a script by name. I chose the &lt;a href="http://docs.codehaus.org/display/GROOVY/Embedding+Groovy"&gt;GroovyScriptEngine&lt;/a&gt; (hopefully I used it in a good way ;) ) &amp;nbsp;because:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style="background-color: white; font-family: Arial, Helvetica, FreeSans, sans-serif; font-size: 13px; line-height: 17.328125px;"&gt;The most complete solution for people who want to embed groovy scripts into their servers and have them reloaded on modification is the GroovyScriptEngine. You initialize the GroovyScriptEngine with a set of CLASSPATH like roots that can be URLs or directory names. You can then execute any Groovy script within those roots. The GSE will also track dependencies between scripts so that if any dependent script is modified the whole tree will be recompiled and reloaded.&lt;/span&gt;&lt;/blockquote&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;I wanted to have some way of caching the compiled classes in order not to have any issues with PermGen.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Anyway you can see that I am doing some conversions to have the URL of the classpath Groovy script resource. At the end we are extracting a class from the Groovy script and we are casting it to the Transformer.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;b&gt;AbstractGroovyXmlTransformer.groovy&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:groovy"&gt;package groovy&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.transformer.Transformer&lt;br /&gt;import groovy.util.slurpersupport.NodeChildren&lt;br /&gt;import groovy.xml.MarkupBuilder&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created with IntelliJ IDEA.&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 23.03.13&lt;br /&gt; * Time: 02:16&lt;br /&gt; */&lt;br /&gt;abstract class AbstractGroovyXmlTransformer implements Transformer&amp;lt;String, String&amp;gt; {&lt;br /&gt;&lt;br /&gt;    static Map&amp;lt;String, Object&amp;gt; MISSING_PROPERTIES = ["convertDate": new DateConverter(), "map": new Mapper()]&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    String transform(String input) {&lt;br /&gt;        def inputXml = new XmlSlurper().parseText input&lt;br /&gt;        def writer = new StringWriter()&lt;br /&gt;        def outputXml = new MarkupBuilder(writer)&lt;br /&gt;        doTransform inputXml, outputXml&lt;br /&gt;        writer.toString()&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    abstract void doTransform(inputXml, outputXml)&lt;br /&gt;&lt;br /&gt;    def propertyMissing(String name) {&lt;br /&gt;        Object property = MISSING_PROPERTIES[name]&lt;br /&gt;        assert property != null, "There is no function like [$name]. The ones that are supported are ${MISSING_PROPERTIES.keySet()}"&lt;br /&gt;        property&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    protected static class Mapper {&lt;br /&gt;        private Map&amp;lt;String, String&amp;gt; inputParameters&lt;br /&gt;&lt;br /&gt;        Mapper given(Map inputParameters) {&lt;br /&gt;            this.inputParameters = inputParameters&lt;br /&gt;            this&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        String from(NodeChildren nodeChildren) {&lt;br /&gt;            assert inputParameters != null, "The mapping can't be null!"&lt;br /&gt;            assert nodeChildren != null, "Node can't be null!"&lt;br /&gt;            String nodeText = nodeChildren.text()&lt;br /&gt;            String mappedValue = inputParameters[nodeText]&lt;br /&gt;            mappedValue ?: inputParameters.default&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        static Mapper map(Map&amp;lt;String, String&amp;gt; inputParameters) {&lt;br /&gt;            return new Mapper(inputParameters)&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    protected static class DateConverter {&lt;br /&gt;        private String inputDate&lt;br /&gt;        private String inputDateFormat&lt;br /&gt;&lt;br /&gt;        DateConverter from(NodeChildren nodeChildren) {&lt;br /&gt;            this.inputDate = nodeChildren.text()&lt;br /&gt;            this&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        DateConverter havingDateFormat(String inputDateFormat) {&lt;br /&gt;            this.inputDateFormat = inputDateFormat&lt;br /&gt;            this&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        String toOutputDateFormat(String outputDateFormat) {&lt;br /&gt;            assert inputDate != null, "The input date for which you are trying to do the conversion can't be null"&lt;br /&gt;            assert inputDateFormat != null, "The input date format for which you are trying to do the conversion can't be null"&lt;br /&gt;            assert outputDateFormat != null, "The output date format for which you are trying to do the conversion can't be null"&lt;br /&gt;            Date.parse(inputDateFormat, inputDate).format(outputDateFormat)&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        static DateConverter convertDate() {&lt;br /&gt;            new DateConverter()&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="brush:groovy"&gt;&lt;/pre&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;In this abstract Groovy class I decided to place all the logic that could blur the image for the BA. In addition to that I created some helper classes and methods. In order to fully use the Groovy's DSL capabilities I used the propertyMissing method to map the words &lt;b&gt;"map"&lt;/b&gt; and &lt;b&gt;"convertDate"&lt;/b&gt;&amp;nbsp;to create the instances of the helper classes which are used in the &lt;b&gt;Builder&lt;/b&gt; design pattern way:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:groovy"&gt;convertDate.from(inputXml.InputSystemContext.InputDate).havingDateFormat("dd/MM/yyyy").toOutputDateFormat("yy/MM/dd")&lt;br /&gt;&lt;br /&gt;or&lt;br /&gt;&lt;br /&gt;map.given("Some_action" : "Some_output_action", "default" : "something else").from(inputXml.AdditionalData.TypeOfAction)&lt;br /&gt;&lt;/pre&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;If there is no such "function" (for example a BA makes a typo or sth) then an assertion error is being thrown and a list of supported "function" (which in reality are properties - but they are functions from the BA's perspective) is being printed.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Now let's move to the script that would be used by the BA.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;b&gt;GroovyXmlTransformer.groovy&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:groovy"&gt;package groovy&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created with IntelliJ IDEA.&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 22.03.13&lt;br /&gt; * Time: 23:59&lt;br /&gt; *&lt;br /&gt; * additional functions:&lt;br /&gt; *&lt;br /&gt; * convertDate.from(Node).havingDateFormat("DateFormat").toOutputDateFormat("AnotherDateFormat")&lt;br /&gt; * map.given("Value to be mapped from" : "Value to be mapped to", "default" : "default value").from(Node)&lt;br /&gt; *&lt;br /&gt; */&lt;br /&gt;class GroovyXmlTransformer extends AbstractGroovyXmlTransformer {&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    void doTransform(inputXml, outputXml) {&lt;br /&gt;        outputXml.OutputSystemEnvelope() {&lt;br /&gt;            OutputSystemContext {&lt;br /&gt;                ResponseID(inputXml.InputSystemContext.RequestID.text().reverse())&lt;br /&gt;                OutputSource('OUTPUT_SYSTEM')&lt;br /&gt;                OutputDate(convertDate.from(inputXml.InputSystemContext.InputDate).havingDateFormat("dd/MM/yyyy").toOutputDateFormat("yy/MM/dd"))&lt;br /&gt;            }&lt;br /&gt;            OutputAdditionalData {&lt;br /&gt;                OutputReferenceNo("SOME_PREFIX_${inputXml.AdditionalData.ReferenceNo.text()}_SOME_SUFIX")&lt;br /&gt;                OutputTypeOfAction(map.given("Some_action" : "Some_output_action", "default" : "something else").from(inputXml.AdditionalData.TypeOfAction))&lt;br /&gt;                OutputTransactions {&lt;br /&gt;                    inputXml.AdditionalData.Transactions.Transaction.each {&lt;br /&gt;                        OutputTransaction(Client: it.Client, ProductType: it.ProductType, 'Done')&lt;br /&gt;                    }&lt;br /&gt;                }&lt;br /&gt;                OutputProducts {&lt;br /&gt;                    def minProduct = inputXml.AdditionalData.Products.Product.list().min { it.Value.text() }&lt;br /&gt;                    def maxProduct = inputXml.AdditionalData.Products.Product.list().max { it.Value.text() }&lt;br /&gt;                    MinProduct(name: minProduct.Name.text(), minProduct.Value.text())&lt;br /&gt;                    MaxProduct(name: maxProduct.Name.text(), maxProduct.Value.text())&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;This piece of code does the following mapping (You can check the &lt;b&gt;/xml/SampleXml.xml&lt;/b&gt; ):&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="datagrid"&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Mapped from&lt;/th&gt;&lt;th&gt;Mapped to&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;InputSystemEnvelope&lt;/td&gt;&lt;td&gt;OutputSystemEnvelope&lt;/td&gt;&lt;/tr&gt;&lt;tr class="alt"&gt;&lt;td&gt;InputSystemContex&lt;/td&gt;&lt;td&gt;OutputSystemContex&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;RequestId&lt;/td&gt;&lt;td&gt;ResponseId (the Id should be reverted)&lt;/td&gt;&lt;/tr&gt;&lt;tr class="alt"&gt;&lt;td&gt;InputSource&lt;/td&gt;&lt;td&gt;OutputSoutce (constant "UTPUT_SYSTEM")&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InputDate&lt;/td&gt;&lt;td&gt;OutputDate (converted from dd/MM/yyyy to yy/MM/dd) &lt;/td&gt;&lt;/tr&gt;&lt;tr class="alt"&gt;&lt;td&gt;InputAdditionalData&lt;/td&gt;&lt;td&gt;OutputAdditionalData&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InputReferenceNo&lt;/td&gt;&lt;td&gt;OutputReferenceNo ( "SOME_PREFIX_" + value from InputReferenceNo + "_SOME_SUFIX") &lt;/td&gt;&lt;/tr&gt;&lt;tr class="alt"&gt;&lt;td&gt;InputTypeOfAction&lt;/td&gt;&lt;td&gt;OutputTypeOfAction (mapped in such a way that if InputTypeOfAction is equal to "Some_action" then we will have "Some_output_action". Otherwise we get "something else")&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Transactions&lt;/td&gt;&lt;td&gt;OutputTransactions&lt;/td&gt;&lt;/tr&gt;&lt;tr class="alt"&gt;&lt;td&gt;Transaction&lt;/td&gt;&lt;td&gt;OutputTransaction ( Attribute Client from Transaction.Client, Attribute ProductType from Transaction.ProductType, and the value "Done")&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Products&lt;/td&gt;&lt;td&gt;OutputProducts&lt;/td&gt;&lt;/tr&gt;&lt;tr class="alt"&gt;&lt;td&gt;Product having min value&lt;/td&gt;&lt;td&gt;MinProduct&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Product having max value&lt;/td&gt;&lt;td&gt;MaxProduct&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;The output&lt;/h2&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:xml"&gt;Converted from [&amp;lt;InputSystemEnvelope&amp;gt;&lt;br /&gt;    &amp;lt;InputSystemContext&amp;gt;&lt;br /&gt;        &amp;lt;RequestID&amp;gt;1234567890&amp;lt;/RequestID&amp;gt;&lt;br /&gt;        &amp;lt;InputSource&amp;gt;INPUT_SYSTEM&amp;lt;/InputSource&amp;gt;&lt;br /&gt;        &amp;lt;InputDate&amp;gt;22/03/2013&amp;lt;/InputDate&amp;gt;&lt;br /&gt;    &amp;lt;/InputSystemContext&amp;gt;&lt;br /&gt;    &amp;lt;AdditionalData&amp;gt;&lt;br /&gt;        &amp;lt;ReferenceNo&amp;gt;Ref1234567&amp;lt;/ReferenceNo&amp;gt;&lt;br /&gt;        &amp;lt;TypeOfAction&amp;gt;Some_action&amp;lt;/TypeOfAction&amp;gt;&lt;br /&gt;        &amp;lt;Transactions&amp;gt;&lt;br /&gt;            &amp;lt;Transaction&amp;gt;&lt;br /&gt;                &amp;lt;Client&amp;gt;ACME&amp;lt;/Client&amp;gt;&lt;br /&gt;                &amp;lt;ProductType&amp;gt;IRS&amp;lt;/ProductType&amp;gt;&lt;br /&gt;            &amp;lt;/Transaction&amp;gt;&lt;br /&gt;            &amp;lt;Transaction&amp;gt;&lt;br /&gt;                &amp;lt;Client&amp;gt;Oracle&amp;lt;/Client&amp;gt;&lt;br /&gt;                &amp;lt;ProductType&amp;gt;DB&amp;lt;/ProductType&amp;gt;&lt;br /&gt;            &amp;lt;/Transaction&amp;gt;&lt;br /&gt;        &amp;lt;/Transactions&amp;gt;&lt;br /&gt;        &amp;lt;Products&amp;gt;&lt;br /&gt;            &amp;lt;Product&amp;gt;&lt;br /&gt;                &amp;lt;Name&amp;gt;Book&amp;lt;/Name&amp;gt;&lt;br /&gt;                &amp;lt;Value&amp;gt;1&amp;lt;/Value&amp;gt;&lt;br /&gt;            &amp;lt;/Product&amp;gt;&lt;br /&gt;            &amp;lt;Product&amp;gt;&lt;br /&gt;                &amp;lt;Name&amp;gt;Car&amp;lt;/Name&amp;gt;&lt;br /&gt;                &amp;lt;Value&amp;gt;10000&amp;lt;/Value&amp;gt;&lt;br /&gt;            &amp;lt;/Product&amp;gt;&lt;br /&gt;            &amp;lt;Product&amp;gt;&lt;br /&gt;                &amp;lt;Name&amp;gt;Boat&amp;lt;/Name&amp;gt;&lt;br /&gt;                &amp;lt;Value&amp;gt;100000000&amp;lt;/Value&amp;gt;&lt;br /&gt;            &amp;lt;/Product&amp;gt;&lt;br /&gt;            &amp;lt;Product&amp;gt;&lt;br /&gt;                &amp;lt;Name&amp;gt;Spaceship&amp;lt;/Name&amp;gt;&lt;br /&gt;                &amp;lt;Value&amp;gt;1000000000000000000&amp;lt;/Value&amp;gt;&lt;br /&gt;            &amp;lt;/Product&amp;gt;&lt;br /&gt;        &amp;lt;/Products&amp;gt;&lt;br /&gt;    &amp;lt;/AdditionalData&amp;gt;&lt;br /&gt;&amp;lt;/InputSystemEnvelope&amp;gt;]&lt;br /&gt;&lt;br /&gt; to&lt;br /&gt;&lt;br /&gt;[&amp;lt;OutputSystemEnvelope&amp;gt;&lt;br /&gt;  &amp;lt;OutputSystemContext&amp;gt;&lt;br /&gt;    &amp;lt;ResponseID&amp;gt;0987654321&amp;lt;/ResponseID&amp;gt;&lt;br /&gt;    &amp;lt;OutputSource&amp;gt;OUTPUT_SYSTEM&amp;lt;/OutputSource&amp;gt;&lt;br /&gt;    &amp;lt;OutputDate&amp;gt;13/03/22&amp;lt;/OutputDate&amp;gt;&lt;br /&gt;  &amp;lt;/OutputSystemContext&amp;gt;&lt;br /&gt;  &amp;lt;OutputAdditionalData&amp;gt;&lt;br /&gt;    &amp;lt;OutputReferenceNo&amp;gt;SOME_PREFIX_Ref1234567_SOME_SUFIX&amp;lt;/OutputReferenceNo&amp;gt;&lt;br /&gt;    &amp;lt;OutputTypeOfAction&amp;gt;Some_output_action&amp;lt;/OutputTypeOfAction&amp;gt;&lt;br /&gt;    &amp;lt;OutputTransactions&amp;gt;&lt;br /&gt;      &amp;lt;OutputTransaction Client='ACME' ProductType='IRS'&amp;gt;Done&amp;lt;/OutputTransaction&amp;gt;&lt;br /&gt;      &amp;lt;OutputTransaction Client='Oracle' ProductType='DB'&amp;gt;Done&amp;lt;/OutputTransaction&amp;gt;&lt;br /&gt;    &amp;lt;/OutputTransactions&amp;gt;&lt;br /&gt;    &amp;lt;OutputProducts&amp;gt;&lt;br /&gt;      &amp;lt;MinProduct name='Book'&amp;gt;1&amp;lt;/MinProduct&amp;gt;&lt;br /&gt;      &amp;lt;MaxProduct name='Spaceship'&amp;gt;1000000000000000000&amp;lt;/MaxProduct&amp;gt;&lt;br /&gt;    &amp;lt;/OutputProducts&amp;gt;&lt;br /&gt;  &amp;lt;/OutputAdditionalData&amp;gt;&lt;br /&gt;&amp;lt;/OutputSystemEnvelope&amp;gt;]&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;h2&gt;Pros and cons&lt;/h2&gt;The pros and cons of this approach are as follows:&lt;br /&gt;&lt;br /&gt;Pros:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The mapping is done sequentialy - field by field (it is easier to debug the problem)&lt;/li&gt;&lt;li&gt;The mapping consists of vocabulary understandable by the BA&lt;/li&gt;&lt;li&gt;Most of mappings could be done by the BA&lt;/li&gt;&lt;li&gt;The majority of non-mapping grammar is hidden in the abstraction&lt;/li&gt;&lt;li&gt;The compilation of the Groovy script is faster than creation of KnowledgeBases and compilation of Drools scripts&lt;/li&gt;&lt;li&gt;Independence on the XML schema (each change of the schema would require the recompilation of the JAXB classes)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Cons:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;The BA would have to have some knowledge from the domain of computer science&lt;/li&gt;&lt;li&gt;No parallel mapping&lt;/li&gt;&lt;li&gt;The mapping might get less readable due to the fact that it is highly probable that the BA (out of lack of time) won't create a single function - all the logic will end up in the closures for a given Node.&lt;/li&gt;&lt;li&gt;There might be some memory issues with parsing and recompilation of the Groovy scripts&lt;/li&gt;&lt;li&gt;No XML schema may lead to improper output / input XML path setting&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;The problem with mapping that we encountered in our project turned out to be a very interesting issue to deal with. The example shown in this post is only a proposition of solving the issue and hopefully could be a starting point to a further discussion on the topic. If you have any ideas or opinions on this topic please leave a comment under &lt;a href="http://toomuchcoding.blogspot.com/2013/03/execution-of-groovy-scripts-from-java.html"&gt;this article&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The sources can be found on the &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/69f4b59e4452e630670c71150d125e7ea86170aa/Groovy/Mappings?at=default"&gt;Too Much Coding BitBucket repository&lt;/a&gt; and on &lt;a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Groovy/Mappings"&gt;GitHub&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/1609855364587063986/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/03/execution-of-groovy-scripts-from-java.html#comment-form" title="3 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1609855364587063986"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1609855364587063986"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/03/execution-of-groovy-scripts-from-java.html" title="Execution of Groovy scripts from Java - XmlSlurper and MarkupBuilder in mapping issues"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-LUqaZQkqom4/UVdMZkiW7RI/AAAAAAAABDc/f3sRJ9fF6AM/s72-c/Project+structure.png" height="72" width="72"/>
  <thr:total>3</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-8390737394467383677</id>
  <published>2013-06-08T12:10:00.000-07:00</published>
  <updated>2013-06-11T14:55:25.487-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="JAXB"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="RETURNS_DEEP_STUBS"/>
  <title type="text">Mockito - RETURNS_DEEP_STUBS for JAXB</title>
  <content type="html">&lt;script type="text/javascript"&gt;var dzone_style = '2';&lt;/script&gt;&lt;script language="javascript" src="http://widgets.dzone.com/links/widgets/zoneit.js"&gt;&lt;/script&gt;&lt;br /&gt;Sorry for not having written for some time but I was busy with writing the JBoss Drools Refcard for DZone and I am in the middle of writing a book about Mockito so I don't have too much time left for blogging...&lt;br /&gt;&lt;br /&gt;Anyway quite recently on my current project I had an interesting situation regarding unit testing with Mockito and JAXB structures. We have very deeply nested JAXB structures generated from schemas that are provided for us which means that we can't change it in anyway.&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Let's take a look at the project structure:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-V5rYljCB5V4/UbN2mTKQ_QI/AAAAAAAABY8/C4WL8Tg-9b8/s1600/project_structure.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://1.bp.blogspot.com/-V5rYljCB5V4/UbN2mTKQ_QI/AAAAAAAABY8/C4WL8Tg-9b8/s320/project_structure.jpg" width="173" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The project structure is pretty simple - there is a &lt;b&gt;Player.xsd&lt;/b&gt; schema file that thanks to using the&amp;nbsp;&lt;b&gt;jaxb2-maven-plugin&lt;/b&gt;&amp;nbsp;produces the generated JAXB Java classes corresponding to the schema in the &lt;b&gt;target/jaxb/&lt;/b&gt; folder in the appropriate package that is defined in the &lt;b&gt;pom.xml&lt;/b&gt;. Speaking of which let's take a look at the &lt;b&gt;pom.xml&lt;/b&gt; file.&lt;br /&gt;&lt;br /&gt;The pom.xml :&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt; xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;&lt;br /&gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br /&gt; &amp;lt;groupId&amp;gt;com.blogspot.toomuchcoding&amp;lt;/groupId&amp;gt;&lt;br /&gt; &amp;lt;artifactId&amp;gt;mockito-deep_stubs&amp;lt;/artifactId&amp;gt;&lt;br /&gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;properties&amp;gt;&lt;br /&gt;  &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;br /&gt;  &amp;lt;maven.compiler.source&amp;gt;1.6&amp;lt;/maven.compiler.source&amp;gt;&lt;br /&gt;  &amp;lt;maven.compiler.target&amp;gt;1.6&amp;lt;/maven.compiler.target&amp;gt;&lt;br /&gt; &amp;lt;/properties&amp;gt;&lt;br /&gt; &amp;lt;repositories&amp;gt;&lt;br /&gt;  &amp;lt;repository&amp;gt;&lt;br /&gt;   &amp;lt;id&amp;gt;spring-release&amp;lt;/id&amp;gt;&lt;br /&gt;   &amp;lt;url&amp;gt;http://maven.springframework.org/release&amp;lt;/url&amp;gt;&lt;br /&gt;  &amp;lt;/repository&amp;gt;&lt;br /&gt;  &amp;lt;repository&amp;gt;&lt;br /&gt;   &amp;lt;id&amp;gt;maven-us-nuxeo&amp;lt;/id&amp;gt;&lt;br /&gt;   &amp;lt;url&amp;gt;https://maven-us.nuxeo.org/nexus/content/groups/public&amp;lt;/url&amp;gt;&lt;br /&gt;  &amp;lt;/repository&amp;gt;&lt;br /&gt; &amp;lt;/repositories&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;dependencies&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;4.10&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;mockito-all&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;1.9.5&amp;lt;/version&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;/dependencies&amp;gt;&lt;br /&gt; &lt;br /&gt; &lt;br /&gt;    &amp;lt;build&amp;gt;&lt;br /&gt;        &amp;lt;pluginManagement&amp;gt;&lt;br /&gt;            &amp;lt;plugins&amp;gt;&lt;br /&gt;                &amp;lt;plugin&amp;gt;&lt;br /&gt;                    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br /&gt;                    &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;                    &amp;lt;version&amp;gt;2.5.1&amp;lt;/version&amp;gt;&lt;br /&gt;                &amp;lt;/plugin&amp;gt;&lt;br /&gt;            &amp;lt;/plugins&amp;gt;&lt;br /&gt;        &amp;lt;/pluginManagement&amp;gt;&lt;br /&gt;        &amp;lt;plugins&amp;gt;&lt;br /&gt;            &amp;lt;plugin&amp;gt;&lt;br /&gt;                &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;&lt;br /&gt;                &amp;lt;artifactId&amp;gt;jaxb2-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;                &amp;lt;version&amp;gt;1.5&amp;lt;/version&amp;gt;&lt;br /&gt;                &amp;lt;executions&amp;gt;&lt;br /&gt;                    &amp;lt;execution&amp;gt;&lt;br /&gt;                        &amp;lt;id&amp;gt;xjc&amp;lt;/id&amp;gt;&lt;br /&gt;                        &amp;lt;goals&amp;gt;&lt;br /&gt;                            &amp;lt;goal&amp;gt;xjc&amp;lt;/goal&amp;gt;&lt;br /&gt;                        &amp;lt;/goals&amp;gt;&lt;br /&gt;                    &amp;lt;/execution&amp;gt;&lt;br /&gt;                &amp;lt;/executions&amp;gt;&lt;br /&gt;                &amp;lt;configuration&amp;gt;&lt;br /&gt;                    &amp;lt;packageName&amp;gt;com.blogspot.toomuchcoding.model&amp;lt;/packageName&amp;gt;&lt;br /&gt;                    &amp;lt;schemaDirectory&amp;gt;${project.basedir}/src/main/resources/xsd&amp;lt;/schemaDirectory&amp;gt;&lt;br /&gt;                &amp;lt;/configuration&amp;gt;&lt;br /&gt;            &amp;lt;/plugin&amp;gt;&lt;br /&gt;        &amp;lt;/plugins&amp;gt;&lt;br /&gt;    &amp;lt;/build&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/project&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;Apart from the previously defined project dependencies, as mentioned previously in the &lt;b&gt;jaxb2-maven-plugin&lt;/b&gt;&amp;nbsp;in the configuration node you can define the &lt;b&gt;packageName&lt;/b&gt; value that defines to which package should the JAXB classes be generated basing on the &lt;b&gt;schemaDirectory&lt;/b&gt; value where the plugin can find the proper schema files.&lt;br /&gt;&lt;br /&gt;Speaking of which let's check the &lt;b&gt;Player.xsd&lt;/b&gt; schema file (simillar to the one that was present in the &lt;a href="http://toomuchcoding.blogspot.com/2012/11/spring-jms-message-automatic-conversion.html"&gt;Spring JMS automatic message conversion article of mine&lt;/a&gt;):&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:element name="PlayerDetails"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:complexType&amp;gt;&lt;br /&gt;            &amp;lt;xsd:sequence&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="Name" type="xsd:string"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="Surname" type="xsd:string"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="Position" type="PositionType"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="Age" type="xsd:int"/&amp;gt;&lt;br /&gt;                &amp;lt;xsd:element name="ClubDetails" type="ClubDetails"/&amp;gt;&lt;br /&gt;            &amp;lt;/xsd:sequence&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:complexType&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:element&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:complexType name="ClubDetails"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:sequence&amp;gt;&lt;br /&gt;            &amp;lt;xsd:element name="TeamName" type="xsd:string"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:element name="Country" type="CountryDetails"/&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:sequence&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:complexType&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:complexType name="CountryDetails"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:sequence&amp;gt;&lt;br /&gt;            &amp;lt;xsd:element name="CountryName" type="xsd:string"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:element name="CountryCode" type="CountryCodeDetails"/&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:sequence&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:complexType&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:complexType name="CountryCodeDetails"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:sequence&amp;gt;&lt;br /&gt;            &amp;lt;xsd:element name="CountryName" type="xsd:string"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:element name="CountryCode" type="CountryCodeType"/&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:sequence&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:complexType&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:simpleType name="CountryCodeType"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:restriction base="xsd:string"&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="PL"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="GER"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="FRA"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="ENG"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="ESP"/&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:restriction&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:simpleType&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;xsd:simpleType name="PositionType"&amp;gt;&lt;br /&gt;        &amp;lt;xsd:restriction base="xsd:string"&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="GK"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="DEF"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="MID"/&amp;gt;&lt;br /&gt;            &amp;lt;xsd:enumeration value="ATT"/&amp;gt;&lt;br /&gt;        &amp;lt;/xsd:restriction&amp;gt;&lt;br /&gt;    &amp;lt;/xsd:simpleType&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/xsd:schema&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;As you can see I'm defining some complex types that even though might have no business sense but you can find such examples in the real life :)&lt;br /&gt;&lt;br /&gt;Let's find out how the method that we would like to test looks like. Here we have the &lt;b&gt;PlayerServiceImpl&lt;/b&gt; that implements the &lt;b&gt;PlayerService&lt;/b&gt; interface:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.service;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.model.PlayerDetails;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 08.06.13&lt;br /&gt; * Time: 19:02&lt;br /&gt; */&lt;br /&gt;public class PlayerServiceImpl implements PlayerService {&lt;br /&gt;    @Override&lt;br /&gt;    public boolean isPlayerOfGivenCountry(PlayerDetails playerDetails, String country) {&lt;br /&gt;        String countryValue = playerDetails.getClubDetails().getCountry().getCountryCode().getCountryCode().value();&lt;br /&gt;        return countryValue.equalsIgnoreCase(country);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;We are getting the nested elements from the JAXB generated classes. Although it violates the &lt;a href="http://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt;&amp;nbsp;it is quite common to call methods of &lt;b&gt;structures&lt;/b&gt;&amp;nbsp;because JAXB generated classes are in fact structures so in fact I fully agree with &lt;a href="http://martinfowler.com/articles/mocksArentStubs.html"&gt;Martin Fowler that it should be called the Suggestion of Demeter&lt;/a&gt;. Anyway let's see how you could test the method:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;    @Test&lt;br /&gt;    public void shouldReturnTrueIfCountryCodeIsTheSame() throws Exception {&lt;br /&gt;        //given&lt;br /&gt;        PlayerDetails playerDetails = new PlayerDetails();&lt;br /&gt;        ClubDetails clubDetails = new ClubDetails();&lt;br /&gt;        CountryDetails countryDetails = new CountryDetails();&lt;br /&gt;        CountryCodeDetails countryCodeDetails = new CountryCodeDetails();&lt;br /&gt;        playerDetails.setClubDetails(clubDetails);&lt;br /&gt;        clubDetails.setCountry(countryDetails);&lt;br /&gt;        countryDetails.setCountryCode(countryCodeDetails);&lt;br /&gt;        countryCodeDetails.setCountryCode(CountryCodeType.ENG);&lt;br /&gt;&lt;br /&gt;        //when&lt;br /&gt;        boolean playerOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        //then&lt;br /&gt;        assertThat(playerOfGivenCountry, is(true));&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;The function checks if, once you have the same Country Code, you get a true boolean from the method. The only problem is the amount of sets and instantiations that take place when you want to create the input message. In our projects we have twice as many nested elements so you can only imagine the number of code that we would have to produce to create the input object...&lt;br /&gt;&lt;br /&gt;So what can be done to improve this code? Mockito comes to the rescue to together with the &lt;b&gt;RETURN_DEEP_STUBS&lt;/b&gt; default answer to the &lt;b&gt;&lt;a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html#mock(java.lang.Class, org.mockito.stubbing.Answer)"&gt;Mockito.mock(...)&lt;/a&gt;&lt;/b&gt; method:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;  @Test&lt;br /&gt;    public void shouldReturnTrueIfCountryCodeIsTheSameUsingMockitoReturnDeepStubs() throws Exception {&lt;br /&gt;        //given&lt;br /&gt;        PlayerDetails playerDetailsMock = mock(PlayerDetails.class, RETURNS_DEEP_STUBS);&lt;br /&gt;        CountryCodeType countryCodeType = CountryCodeType.ENG;&lt;br /&gt;        when(playerDetailsMock.getClubDetails().getCountry().getCountryCode().getCountryCode()).thenReturn(countryCodeType);&lt;br /&gt;&lt;br /&gt;        //when&lt;br /&gt;        boolean playerOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetailsMock, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        //then&lt;br /&gt;        assertThat(playerOfGivenCountry, is(true));&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;So what happened here is that you use the &lt;b&gt;Mockito.mock(...)&lt;/b&gt; method and provide the &lt;b&gt;RETURNS_DEEP_STUBS&lt;/b&gt; answer that will create mocks automatically for you. Mind you that Enums can't be mocked that's why you can't write in the &lt;b&gt;Mockito.when(...)&lt;/b&gt; function &lt;b&gt;playerDetailsMock.getClubDetails().getCountry().getCountryCode().getCountryCode().getValue()&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Summing it up you can compare the readability of both tests and see how clearer it is to work with JAXB structures by using Mockito &lt;b&gt;RETURNS_DEEP_STUBS&lt;/b&gt; default answer.&lt;br /&gt;&lt;br /&gt;Naturally sources for this example are available at &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/fc1bc010cf16e1f6477391f54e83f8ad446f7608/Unit%20Testing/Mockito%20-%20Deep%20Stubs?at=default"&gt;BitBucket&lt;/a&gt; and &lt;a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit%20Testing/Mockito%20-%20Deep%20Stubs"&gt;GitHub&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/8390737394467383677/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/06/mockito-returndeepstubs-for-jaxb.html#comment-form" title="1 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/8390737394467383677"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/8390737394467383677"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/06/mockito-returndeepstubs-for-jaxb.html" title="Mockito - RETURNS_DEEP_STUBS for JAXB"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-V5rYljCB5V4/UbN2mTKQ_QI/AAAAAAAABY8/C4WL8Tg-9b8/s72-c/project_structure.jpg" height="72" width="72"/>
  <thr:total>1</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-3494651621707780492</id>
  <published>2013-06-12T04:12:00.001-07:00</published>
  <updated>2013-06-12T04:13:42.816-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="extraInterfaces"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="MockitoJUnitRunner"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Refactoring"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Unit tests"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="withSettings"/>
  <title type="text">Mockito - Extra Interfaces with annotations and static methods</title>
  <content type="html">&lt;script type="text/javascript"&gt;var dzone_style = '2';&lt;/script&gt;&lt;script language="javascript" src="http://widgets.dzone.com/links/widgets/zoneit.js"&gt;&lt;/script&gt;&lt;br /&gt;In the code I have quite recently came across a really bad piece of code that based on class casting in terms of performing some actions on objects. Of course the code needed to be refactored but sometimes you can't do it / or don't want to do it (and it should be understandable) if first you don't have unit tests of that functionality. In the following post I will show how to test such code, how to refactor it and in fact what I think about such code ;) &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Let's take a look at the project structure:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-RpIw1Ccnof8/UbhBR8EHqbI/AAAAAAAABZU/cPRqLAPNCHU/s1600/Mockito+Extra+Interfaces.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://3.bp.blogspot.com/-RpIw1Ccnof8/UbhBR8EHqbI/AAAAAAAABZU/cPRqLAPNCHU/s320/Mockito+Extra+Interfaces.jpg" width="152" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span id="goog_1682433447"&gt;&lt;/span&gt;&lt;span id="goog_1682433448"&gt;&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As presented in the post regarding &lt;a href="http://toomuchcoding.blogspot.com/2013/06/mockito-returndeepstubs-for-jaxb.html"&gt;Mocktio RETURNS_DEEP_STUBS Answer for JAXB&lt;/a&gt;&amp;nbsp;yet again we have the JAXB generated classes by the JAXB compiler in the &lt;b&gt;com.blogspot.toomuchcoding.model&lt;/b&gt; package. Let's ommit the discussion over the &lt;b&gt;pom.xml&lt;/b&gt; file since it's exactly the same as in the previous post.&lt;br /&gt;&lt;br /&gt;In the&amp;nbsp;&lt;b&gt;com.blogspot.toomuchcoding.adapter&lt;/b&gt;&amp;nbsp;package we have adapters over the JAXB PlayerDetails class that provides access to the Player interface. There is the&lt;br /&gt;&lt;br /&gt;&lt;b&gt;CommonPlayerAdapter.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.adapter;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.model.Player;&lt;br /&gt;import com.blogspot.toomuchcoding.model.PlayerDetails;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 09.06.13&lt;br /&gt; * Time: 15:42&lt;br /&gt; */&lt;br /&gt;public class CommonPlayerAdapter implements Player {&lt;br /&gt;    private final PlayerDetails playerDetails;&lt;br /&gt;&lt;br /&gt;    public CommonPlayerAdapter(PlayerDetails playerDetails){&lt;br /&gt;        this.playerDetails = playerDetails;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void run() {&lt;br /&gt;        System.out.printf("Run %s. Run!%n", playerDetails.getName());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public PlayerDetails getPlayerDetails() {&lt;br /&gt;        return playerDetails;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;DefencePlayerAdapter.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.adapter;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.model.DJ;&lt;br /&gt;import com.blogspot.toomuchcoding.model.DefensivePlayer;&lt;br /&gt;import com.blogspot.toomuchcoding.model.JavaDeveloper;&lt;br /&gt;import com.blogspot.toomuchcoding.model.PlayerDetails;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 09.06.13&lt;br /&gt; * Time: 15:42&lt;br /&gt; */&lt;br /&gt;public class DefencePlayerAdapter extends CommonPlayerAdapter implements DefensivePlayer, DJ, JavaDeveloper {&lt;br /&gt;&lt;br /&gt;    public DefencePlayerAdapter(PlayerDetails playerDetails){&lt;br /&gt;        super(playerDetails);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void defend(){&lt;br /&gt;        System.out.printf("Defence! %s. Defence!%n", getPlayerDetails().getName());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void playSomeMusic() {&lt;br /&gt;        System.out.println("Oops I did it again...!");&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void doSomeSeriousCoding() {&lt;br /&gt;        System.out.println("System.out.println(\"Hello world\");");&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;OffensivePlayerAdapter.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.adapter;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.model.OffensivePlayer;&lt;br /&gt;import com.blogspot.toomuchcoding.model.PlayerDetails;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 09.06.13&lt;br /&gt; * Time: 15:42&lt;br /&gt; */&lt;br /&gt;public class OffensivePlayerAdapter extends CommonPlayerAdapter implements OffensivePlayer {&lt;br /&gt;&lt;br /&gt;    public OffensivePlayerAdapter(PlayerDetails playerDetails){&lt;br /&gt;        super(playerDetails);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void shoot(){&lt;br /&gt;        System.out.printf("%s Shooooot!.%n", getPlayerDetails().getName());&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;Ok, now let's go to the more interesting part. Let us assume that we have a very simple factory of players:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerFactoryImpl.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.factory;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.adapter.CommonPlayerAdapter;&lt;br /&gt;import com.blogspot.toomuchcoding.adapter.DefencePlayerAdapter;&lt;br /&gt;import com.blogspot.toomuchcoding.adapter.OffensivePlayerAdapter;&lt;br /&gt;import com.blogspot.toomuchcoding.model.Player;&lt;br /&gt;import com.blogspot.toomuchcoding.model.PlayerDetails;&lt;br /&gt;import com.blogspot.toomuchcoding.model.PositionType;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 09.06.13&lt;br /&gt; * Time: 15:53&lt;br /&gt; */&lt;br /&gt;&lt;br /&gt;public class PlayerFactoryImpl implements PlayerFactory {&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public Player createPlayer(PositionType positionType) {&lt;br /&gt;        PlayerDetails player = createCommonPlayer(positionType);&lt;br /&gt;        switch (positionType){&lt;br /&gt;            case ATT:&lt;br /&gt;                return new OffensivePlayerAdapter(player);&lt;br /&gt;            case MID:&lt;br /&gt;                return new OffensivePlayerAdapter(player);&lt;br /&gt;            case DEF:&lt;br /&gt;                return new DefencePlayerAdapter(player);&lt;br /&gt;            case GK:&lt;br /&gt;                return new DefencePlayerAdapter(player);&lt;br /&gt;            default:&lt;br /&gt;                return new CommonPlayerAdapter(player);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private PlayerDetails createCommonPlayer(PositionType positionType){&lt;br /&gt;        PlayerDetails playerDetails = new PlayerDetails();&lt;br /&gt;        playerDetails.setPosition(positionType);&lt;br /&gt;        return playerDetails;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;Ok so we have the factory that builds Players. Let's take a look at the Service that uses the factory:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerServiceImpl.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.service;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.factory.PlayerFactory;&lt;br /&gt;import com.blogspot.toomuchcoding.model.*;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 08.06.13&lt;br /&gt; * Time: 19:02&lt;br /&gt; */&lt;br /&gt;public class PlayerServiceImpl implements PlayerService {&lt;br /&gt;&lt;br /&gt;    private PlayerFactory playerFactory;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public Player playAGameWithAPlayerOfPosition(PositionType positionType) {&lt;br /&gt;        Player player = playerFactory.createPlayer(positionType);&lt;br /&gt;        player.run();&lt;br /&gt;        performAdditionalActions(player);&lt;br /&gt;        return player;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private void performAdditionalActions(Player player) {&lt;br /&gt;        if(player instanceof OffensivePlayer){&lt;br /&gt;            OffensivePlayer offensivePlayer = (OffensivePlayer) player;&lt;br /&gt;            performAdditionalActionsForTheOffensivePlayer(offensivePlayer);&lt;br /&gt;        }else if(player instanceof DefensivePlayer){&lt;br /&gt;            DefensivePlayer defensivePlayer = (DefensivePlayer) player;&lt;br /&gt;            performAdditionalActionsForTheDefensivePlayer(defensivePlayer);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private void performAdditionalActionsForTheOffensivePlayer(OffensivePlayer offensivePlayer){&lt;br /&gt;        offensivePlayer.shoot();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private void performAdditionalActionsForTheDefensivePlayer(DefensivePlayer defensivePlayer){&lt;br /&gt;        defensivePlayer.defend();&lt;br /&gt;        try{&lt;br /&gt;            DJ dj = (DJ)defensivePlayer;&lt;br /&gt;            dj.playSomeMusic();&lt;br /&gt;            JavaDeveloper javaDeveloper = (JavaDeveloper)defensivePlayer;&lt;br /&gt;            javaDeveloper.doSomeSeriousCoding();&lt;br /&gt;        }catch(ClassCastException exception){&lt;br /&gt;            System.err.println("Sorry, I can't do more than just play football...");&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public PlayerFactory getPlayerFactory() {&lt;br /&gt;        return playerFactory;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void setPlayerFactory(PlayerFactory playerFactory) {&lt;br /&gt;        this.playerFactory = playerFactory;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;Let's admit it... this code is bad. Internally when you look at it (regardless of the fact whether it used &lt;b&gt;instance of&lt;/b&gt; operator or not) you feel that it is evil :) As you can see in the code we have some class casts going on... How on earth can we test it? In the majority of testing frameworks you can't do such class casts on mocks since they are built with the CGLIB library and there can be some ClassCastExceptions thrown. You could still not return mocks and real implementations (assuming that those will not perform any ugly stuff in the construction process) and it could actually work but still - this is bad code :P&lt;br /&gt;&lt;br /&gt;Mockito comes to the rescue (although you shouldn't overuse this feature - in fact if you need to use it please consider refactoring it) with its &lt;b&gt;&lt;a href="http://mockito.googlecode.com/svn/branches/1.8.5/javadoc/org/mockito/MockSettings.html#extraInterfaces(java.lang.Class...)"&gt;extraInterfaces&lt;/a&gt;&lt;/b&gt; feature:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;extraInterfaces&lt;/h3&gt;&lt;blockquote&gt;&lt;a href="http://mockito.googlecode.com/svn/branches/1.8.5/javadoc/org/mockito/MockSettings.html" title="interface in org.mockito"&gt;MockSettings&lt;/a&gt; &lt;b&gt;extraInterfaces&lt;/b&gt;(java.lang.Class&amp;lt;?&amp;gt;...&amp;nbsp;interfaces)&lt;br /&gt;Specifies extra interfaces the mock should implement. Might be useful for legacy code or some corner cases. For background, see issue 51&amp;nbsp;&lt;a href="http://code.google.com/p/mockito/issues/detail?id=51"&gt;here&lt;/a&gt;This mysterious feature should be used very occasionally. The object under test should know exactly its collaborators &amp;amp; dependencies. If you happen to use it often than please make sure you are really producing simple, clean &amp;amp; readable code.&lt;br /&gt;Examples:&lt;br /&gt;Foo foo = mock(Foo.class, withSettings().extraInterfaces(Bar.class, Baz.class));&lt;br /&gt;//now, the mock implements extra interfaces, so following casting is possible:&lt;br /&gt;Bar bar = (Bar) foo;&lt;br /&gt;Baz baz = (Baz) foo;&lt;br /&gt;&lt;b&gt;Parameters:&lt;/b&gt;&lt;code&gt;interfaces&lt;/code&gt;&amp;nbsp;- extra interfaces the should implement.&lt;br /&gt;&lt;b&gt;Returns:&lt;/b&gt;settings instance so that you can fluently specify other settings&lt;/blockquote&gt;&lt;dl&gt;&lt;dd&gt;&lt;/dd&gt;&lt;dd&gt;&lt;dl&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dd&gt;&lt;dl&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;Now let's take a look at the test:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerServiceImplTest.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.service;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.factory.PlayerFactory;&lt;br /&gt;import com.blogspot.toomuchcoding.model.*;&lt;br /&gt;import org.junit.Test;&lt;br /&gt;import org.junit.runner.RunWith;&lt;br /&gt;import org.mockito.InjectMocks;&lt;br /&gt;import org.mockito.Mock;&lt;br /&gt;import org.mockito.invocation.InvocationOnMock;&lt;br /&gt;import org.mockito.runners.MockitoJUnitRunner;&lt;br /&gt;import org.mockito.stubbing.Answer;&lt;br /&gt;&lt;br /&gt;import static org.hamcrest.CoreMatchers.is;&lt;br /&gt;import static org.junit.Assert.assertThat;&lt;br /&gt;import static org.mockito.BDDMockito.*;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 08.06.13&lt;br /&gt; * Time: 19:26&lt;br /&gt; */&lt;br /&gt;@RunWith(MockitoJUnitRunner.class)&lt;br /&gt;public class PlayerServiceImplTest {&lt;br /&gt;&lt;br /&gt;    @Mock&lt;br /&gt;    PlayerFactory playerFactory;&lt;br /&gt;&lt;br /&gt;    @InjectMocks&lt;br /&gt;    PlayerServiceImpl objectUnderTest;&lt;br /&gt;&lt;br /&gt;    @Mock(extraInterfaces = {DJ.class, JavaDeveloper.class})&lt;br /&gt;    DefensivePlayer defensivePlayerWithDjAndJavaDevSkills;&lt;br /&gt;&lt;br /&gt;    @Mock&lt;br /&gt;    DefensivePlayer defensivePlayer;&lt;br /&gt;&lt;br /&gt;    @Mock&lt;br /&gt;    OffensivePlayer offensivePlayer;&lt;br /&gt;&lt;br /&gt;    @Mock&lt;br /&gt;    Player commonPlayer;&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void shouldReturnOffensivePlayerThatRan() throws Exception {&lt;br /&gt;        //given&lt;br /&gt;        given(playerFactory.createPlayer(PositionType.ATT)).willReturn(offensivePlayer);&lt;br /&gt;&lt;br /&gt;        //when&lt;br /&gt;        Player createdPlayer = objectUnderTest.playAGameWithAPlayerOfPosition(PositionType.ATT);&lt;br /&gt;&lt;br /&gt;        //then&lt;br /&gt;        assertThat(createdPlayer == offensivePlayer, is(true));&lt;br /&gt;        verify(offensivePlayer).run();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void shouldReturnDefensivePlayerButHeWontBeADjNorAJavaDev() throws Exception {&lt;br /&gt;        //given&lt;br /&gt;        given(playerFactory.createPlayer(PositionType.GK)).willReturn(defensivePlayer);&lt;br /&gt;&lt;br /&gt;        //when&lt;br /&gt;        Player createdPlayer = objectUnderTest.playAGameWithAPlayerOfPosition(PositionType.GK);&lt;br /&gt;&lt;br /&gt;        //then&lt;br /&gt;        assertThat(createdPlayer == defensivePlayer, is(true));&lt;br /&gt;        verify(defensivePlayer).run();&lt;br /&gt;        verify(defensivePlayer).defend();&lt;br /&gt;        verifyNoMoreInteractions(defensivePlayer);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void shouldReturnDefensivePlayerBeingADjAndAJavaDev() throws Exception {&lt;br /&gt;        //given&lt;br /&gt;        given(playerFactory.createPlayer(PositionType.GK)).willReturn(defensivePlayerWithDjAndJavaDevSkills);&lt;br /&gt;        doAnswer(new Answer&amp;lt;Object&amp;gt;() {&lt;br /&gt;            @Override&lt;br /&gt;            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {&lt;br /&gt;                System.out.println("Hit me baby one more time!");&lt;br /&gt;                return null;&lt;br /&gt;            }&lt;br /&gt;        }).when(((DJ) defensivePlayerWithDjAndJavaDevSkills)).playSomeMusic();&lt;br /&gt;        doAnswer(new Answer&amp;lt;Object&amp;gt;() {&lt;br /&gt;            @Override&lt;br /&gt;            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {&lt;br /&gt;                System.out.println("public static void main(String... args){\n}");&lt;br /&gt;                return null;&lt;br /&gt;            }&lt;br /&gt;        }).when(((JavaDeveloper) defensivePlayerWithDjAndJavaDevSkills)).doSomeSeriousCoding();&lt;br /&gt;&lt;br /&gt;        //when&lt;br /&gt;        Player createdPlayer = objectUnderTest.playAGameWithAPlayerOfPosition(PositionType.GK);&lt;br /&gt;&lt;br /&gt;        //then&lt;br /&gt;        assertThat(createdPlayer == defensivePlayerWithDjAndJavaDevSkills, is(true));&lt;br /&gt;        verify(defensivePlayerWithDjAndJavaDevSkills).run();&lt;br /&gt;        verify(defensivePlayerWithDjAndJavaDevSkills).defend();&lt;br /&gt;        verify((DJ) defensivePlayerWithDjAndJavaDevSkills).playSomeMusic();&lt;br /&gt;        verify((JavaDeveloper) defensivePlayerWithDjAndJavaDevSkills).doSomeSeriousCoding();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void shouldReturnDefensivePlayerBeingADjAndAJavaDevByUsingWithSettings() throws Exception {&lt;br /&gt;        //given&lt;br /&gt;        DefensivePlayer defensivePlayerWithDjAndJavaDevSkills = mock(DefensivePlayer.class, withSettings().extraInterfaces(DJ.class, JavaDeveloper.class));&lt;br /&gt;        given(playerFactory.createPlayer(PositionType.GK)).willReturn(defensivePlayerWithDjAndJavaDevSkills);&lt;br /&gt;        doAnswer(new Answer&amp;lt;Object&amp;gt;() {&lt;br /&gt;            @Override&lt;br /&gt;            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {&lt;br /&gt;                System.out.println("Hit me baby one more time!");&lt;br /&gt;                return null;&lt;br /&gt;            }&lt;br /&gt;        }).when(((DJ) defensivePlayerWithDjAndJavaDevSkills)).playSomeMusic();&lt;br /&gt;        doAnswer(new Answer&amp;lt;Object&amp;gt;() {&lt;br /&gt;            @Override&lt;br /&gt;            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {&lt;br /&gt;                System.out.println("public static void main(String... args){\n}");&lt;br /&gt;                return null;&lt;br /&gt;            }&lt;br /&gt;        }).when(((JavaDeveloper) defensivePlayerWithDjAndJavaDevSkills)).doSomeSeriousCoding();&lt;br /&gt;&lt;br /&gt;        //when&lt;br /&gt;        Player createdPlayer = objectUnderTest.playAGameWithAPlayerOfPosition(PositionType.GK);&lt;br /&gt;&lt;br /&gt;        //then&lt;br /&gt;        assertThat(createdPlayer == defensivePlayerWithDjAndJavaDevSkills, is(true));&lt;br /&gt;        verify(defensivePlayerWithDjAndJavaDevSkills).run();&lt;br /&gt;        verify(defensivePlayerWithDjAndJavaDevSkills).defend();&lt;br /&gt;        verify((DJ) defensivePlayerWithDjAndJavaDevSkills).playSomeMusic();&lt;br /&gt;        verify((JavaDeveloper) defensivePlayerWithDjAndJavaDevSkills).doSomeSeriousCoding();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void shouldReturnCommonPlayer() throws Exception {&lt;br /&gt;        //given&lt;br /&gt;        given(playerFactory.createPlayer(null)).willReturn(commonPlayer);&lt;br /&gt;&lt;br /&gt;        //when&lt;br /&gt;        Player createdPlayer = objectUnderTest.playAGameWithAPlayerOfPosition(null);&lt;br /&gt;&lt;br /&gt;        //then&lt;br /&gt;        assertThat(createdPlayer, is(commonPlayer));&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;There are quite a few tests here so let's take a look at the most interesting ones. &amp;nbsp;But before we do it let's&lt;br /&gt;&lt;br /&gt;We start with providing the &lt;b&gt;@RunWith(MockitoJUnitRunner.class)&lt;/b&gt;&amp;nbsp;annotation which alows us to use the Mockito annotations such as&amp;nbsp;&lt;b&gt;@Mock&lt;/b&gt; and &lt;b&gt;@InjectMocks&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Speaking of which&amp;nbsp;&lt;b&gt;@Mock&lt;/b&gt; annotation creates a Mock whereas&amp;nbsp;&lt;b&gt;@InjectMocks&lt;/b&gt; inject all the mocks either by constructor or by setters (that's awesome isn't it? :) ).&lt;br /&gt;&lt;br /&gt;For the defensive player we are using the extra element of the annotation &lt;b&gt;extraInterfaces &lt;/b&gt;that provides additional interfaces for the given Mock. You can also write (what you can find in the &lt;b&gt;shouldReturnDefensivePlayerBeingADjAndAJavaDevByUsingWithSettings&lt;/b&gt; test) :&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;DefensivePlayer defensivePlayerWithDjAndJavaDevSkills = mock(DefensivePlayer.class, withSettings().extraInterfaces(DJ.class, JavaDeveloper.class));&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;Let's take a closer look at the test that we wrote for the functionality related to the DefensivePlayer and the casting part of the tested function:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;@Test&lt;br /&gt;    public void shouldReturnDefensivePlayerBeingADjAndAJavaDev() throws Exception {&lt;br /&gt;        //given&lt;br /&gt;        given(playerFactory.createPlayer(PositionType.GK)).willReturn(defensivePlayerWithDjAndJavaDevSkills);&lt;br /&gt;        doAnswer(new Answer&amp;lt;Object&amp;gt;() {&lt;br /&gt;            @Override&lt;br /&gt;            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {&lt;br /&gt;                System.out.println("Hit me baby one more time!");&lt;br /&gt;                return null;&lt;br /&gt;            }&lt;br /&gt;        }).when(((DJ) defensivePlayerWithDjAndJavaDevSkills)).playSomeMusic();&lt;br /&gt;        doAnswer(new Answer&amp;lt;Object&amp;gt;() {&lt;br /&gt;            @Override&lt;br /&gt;            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {&lt;br /&gt;                System.out.println("public static void main(String... args){\n}");&lt;br /&gt;                return null;&lt;br /&gt;            }&lt;br /&gt;        }).when(((JavaDeveloper) defensivePlayerWithDjAndJavaDevSkills)).doSomeSeriousCoding();&lt;br /&gt;&lt;br /&gt;        //when&lt;br /&gt;        Player createdPlayer = objectUnderTest.playAGameWithAPlayerOfPosition(PositionType.GK);&lt;br /&gt;&lt;br /&gt;        //then&lt;br /&gt;        assertThat(createdPlayer == defensivePlayerWithDjAndJavaDevSkills, is(true));&lt;br /&gt;        verify(defensivePlayerWithDjAndJavaDevSkills).run();&lt;br /&gt;        verify(defensivePlayerWithDjAndJavaDevSkills).defend();&lt;br /&gt;        verify((DJ) defensivePlayerWithDjAndJavaDevSkills).playSomeMusic();&lt;br /&gt;        verify((JavaDeveloper) defensivePlayerWithDjAndJavaDevSkills).doSomeSeriousCoding();&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;We are using the &lt;b&gt;BDDMockito&lt;/b&gt; static methods like &lt;b&gt;given(...).willReturn(...).willAnswer(...)&lt;/b&gt; etc. Then we are stubbing void methods with our custom Anwsers. In the next line you can see that in order to stub methods of another interface you have to cast the mock to the given interface. The same is related to the verification phase where i norder to check if a method was executed you have to cast the mock to the given interface.&lt;br /&gt;&lt;br /&gt;You could improve the test by returning a real implementation from the factory or if it's a "heavy" operation to create one you could return a mock of such an implementation. What I wanted to show here is how to use the extra interfaces in Mockito (perhaps my usecase is not the best one ;) ). Anyway the implementation presented in the test is bad so we should think of the way to refactor it...&lt;br /&gt;&lt;br /&gt;One of the ideas could be, assuming that the additional logic done in the Service is a part of the creation of the object, to move the code to the factory as such:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayFactoryImplWithFieldSettingLogic.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.factory;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.adapter.CommonPlayerAdapter;&lt;br /&gt;import com.blogspot.toomuchcoding.adapter.DefencePlayerAdapter;&lt;br /&gt;import com.blogspot.toomuchcoding.adapter.OffensivePlayerAdapter;&lt;br /&gt;import com.blogspot.toomuchcoding.model.*;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 09.06.13&lt;br /&gt; * Time: 15:53&lt;br /&gt; */&lt;br /&gt;&lt;br /&gt;public class PlayerFactoryImplWithFieldSettingLogic implements PlayerFactory {&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public Player createPlayer(PositionType positionType) {&lt;br /&gt;        PlayerDetails player = createCommonPlayer(positionType);&lt;br /&gt;        switch (positionType){&lt;br /&gt;            case ATT:&lt;br /&gt;                return createOffensivePlayer(player);&lt;br /&gt;            case MID:&lt;br /&gt;                return createOffensivePlayer(player);&lt;br /&gt;            case DEF:&lt;br /&gt;                return createDefensivePlayer(player);&lt;br /&gt;            case GK:&lt;br /&gt;                return createDefensivePlayer(player);&lt;br /&gt;            default:&lt;br /&gt;                return new CommonPlayerAdapter(player);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private Player createDefensivePlayer(PlayerDetails player) {&lt;br /&gt;        DefencePlayerAdapter defencePlayerAdapter = new DefencePlayerAdapter(player);&lt;br /&gt;        defencePlayerAdapter.defend();&lt;br /&gt;        defencePlayerAdapter.playSomeMusic();&lt;br /&gt;        defencePlayerAdapter.doSomeSeriousCoding();&lt;br /&gt;        return defencePlayerAdapter;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private OffensivePlayer createOffensivePlayer(PlayerDetails player) {&lt;br /&gt;        OffensivePlayer offensivePlayer = new OffensivePlayerAdapter(player);&lt;br /&gt;        offensivePlayer.shoot();&lt;br /&gt;        return offensivePlayer;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private PlayerDetails createCommonPlayer(PositionType positionType){&lt;br /&gt;        PlayerDetails playerDetails = new PlayerDetails();&lt;br /&gt;        playerDetails.setPosition(positionType);&lt;br /&gt;        return playerDetails;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;In this way there is no casting the code is really clean. And now the PlayerService looks like this:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerServiceImplWIthoutUnnecessaryLogic.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.service;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.factory.PlayerFactory;&lt;br /&gt;import com.blogspot.toomuchcoding.model.*;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 08.06.13&lt;br /&gt; * Time: 19:02&lt;br /&gt; */&lt;br /&gt;public class PlayerServiceImplWithoutUnnecessaryLogic implements PlayerService {&lt;br /&gt;&lt;br /&gt;    private PlayerFactory playerFactory;&lt;br /&gt;&lt;br /&gt;    /**&lt;br /&gt;     * What's the point in having this method then?&lt;br /&gt;     * @param positionType&lt;br /&gt;     * @return&lt;br /&gt;     */&lt;br /&gt;    @Override&lt;br /&gt;    public Player playAGameWithAPlayerOfPosition(PositionType positionType) {&lt;br /&gt;        return playerFactory.createPlayer(positionType);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public PlayerFactory getPlayerFactory() {&lt;br /&gt;        return playerFactory;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void setPlayerFactory(PlayerFactory playerFactory) {&lt;br /&gt;        this.playerFactory = playerFactory;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;And the question arises whether there is even any need to have such a method in your code base...&lt;br /&gt;&lt;br /&gt;Summing it all up I hope that I managed to show how to:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Use MockitoJUnitRunner to inject mocks in a clean way&lt;/li&gt;&lt;li&gt;Use annotations or static methods to add extra interfaces that can be used by your mock&lt;/li&gt;&lt;li&gt;Use BDDMockito to perform method stubbing&lt;/li&gt;&lt;li&gt;Stub void methods with custom answer&lt;/li&gt;&lt;li&gt;Stub and verify methods of the extra interfaces&lt;/li&gt;&lt;li&gt;Refactor code that is using class casts&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The sources are available at the &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/cab9f99626730e606c7ed354e81d141819351221/Unit%20Testing/Mockito%20-%20With%20Interfaces?at=default"&gt;TooMuchCoding Bitbucket&lt;/a&gt; repository and &lt;a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit%20Testing/Mockito%20-%20With%20Interfaces"&gt;TooMuchCoding Github&lt;/a&gt; repository.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/3494651621707780492/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/06/mockito-extra-interfaces-with.html#comment-form" title="1 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3494651621707780492"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3494651621707780492"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/06/mockito-extra-interfaces-with.html" title="Mockito - Extra Interfaces with annotations and static methods"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-RpIw1Ccnof8/UbhBR8EHqbI/AAAAAAAABZU/cPRqLAPNCHU/s72-c/Mockito+Extra+Interfaces.jpg" height="72" width="72"/>
  <thr:total>1</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-895804079820138431</id>
  <published>2013-07-25T01:25:00.002-07:00</published>
  <updated>2013-07-25T01:25:44.572-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="DZone"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="JBoss Drools"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Refcard"/>
  <title type="text">The Essential Drools Cheat Sheet at DZone is out!</title>
  <content type="html">Hi! I'm pleased to announce that &lt;a href="http://www.twitter.com/mariofusco"&gt;Maro Fusco's&lt;/a&gt; and mine DZone Refcard -&amp;nbsp;&lt;a href="http://refcardz.dzone.com/refcardz/drools"&gt;The Essential Drools Cheat Sheet&lt;/a&gt;&amp;nbsp;is out at &lt;a href="http://refcardz.dzone.com/refcardz/drools"&gt;http://refcardz.dzone.com/refcardz/drools&lt;/a&gt;. Hope you enjoy it :)</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/895804079820138431/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/07/the-essential-drools-cheat-sheet-at.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/895804079820138431"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/895804079820138431"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/07/the-essential-drools-cheat-sheet-at.html" title="The Essential Drools Cheat Sheet at DZone is out!"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-1420949330182046143</id>
  <published>2013-08-06T04:24:00.000-07:00</published>
  <updated>2013-08-06T04:27:15.897-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mocks"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="RETURNS_DEEP_STUBS"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Specification"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Spies"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Spock"/>
  <title type="text">Spock - return nested spies / mocks</title>
  <content type="html">&lt;script type="text/javascript"&gt;var dzone_style = '2';&lt;/script&gt;&lt;script language="javascript" src="http://widgets.dzone.com/links/widgets/zoneit.js"&gt;&lt;/script&gt;&lt;br /&gt;Hi! Some time ago I have written an article about Mockito and using &lt;a href="http://toomuchcoding.blogspot.com/2013/06/mockito-returndeepstubs-for-jaxb.html"&gt;RETURNS_DEEP_STUBS when working with JAXB&lt;/a&gt;. Quite recently we have faced a similliar issue with deeply nesetd JAXB and the awesome testing framework written in Groovy called&amp;nbsp;&lt;a href="https://code.google.com/p/spock/"&gt;Spock&lt;/a&gt;. Natively Spock does not support creating deep stubs or spies so we needed to create a workaround for it and this article will show you how to do it.&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;h2&gt;Project structure&lt;/h2&gt;We will be working on the same data structure as in the&amp;nbsp;&lt;a href="http://toomuchcoding.blogspot.com/2013/06/mockito-returndeepstubs-for-jaxb.html"&gt;RETURNS_DEEP_STUBS when working with JAXB&lt;/a&gt;&amp;nbsp;article so the project structure will be quite simillar:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-3AoyOo8WYuY/UgC3QJ5TuNI/AAAAAAAABkw/YJzt5EXB10s/s1600/Spock+Deep+Stubs+project+structure.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://4.bp.blogspot.com/-3AoyOo8WYuY/UgC3QJ5TuNI/AAAAAAAABkw/YJzt5EXB10s/s320/Spock+Deep+Stubs+project+structure.jpg" width="191" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As you can see the main difference is such that the tests are present in the&lt;span style="font-family: Courier New, Courier, monospace;"&gt; /test/groovy/&lt;/span&gt; folder instead of &lt;span style="font-family: Courier New, Courier, monospace;"&gt;/test/java/&lt;/span&gt; folder.&lt;br /&gt;&lt;h2&gt;Extended Spock Specification&lt;/h2&gt;In order to use Spock as a testing framework you have to create Groovy test scripts that extend the Spock Specification class. The details of how to use Spock are available &lt;a href="https://code.google.com/p/spock/wiki/SpockBasics"&gt;here&lt;/a&gt;. In this project I have created an abstract class that extends Specification and adds two additional methods for creating nested Test Doubles (I don't remember if I haven't seen a prototype of this approach somewhere on the internet).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;ExtendedSpockSpecification.groovy&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.spock;&lt;br /&gt;&lt;br /&gt;import spock.lang.Specification&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created with IntelliJ IDEA.&lt;br /&gt; * User: MGrzejszczak&lt;br /&gt; * Date: 14.06.13&lt;br /&gt; * Time: 15:26&lt;br /&gt; */&lt;br /&gt;abstract class ExtendedSpockSpecification extends Specification {&lt;br /&gt;    /**&lt;br /&gt;     * The method creates nested structure of spies for all the elements present in the property parameter. Those spies are set on the input object.&lt;br /&gt;     *&lt;br /&gt;     * @param object - object on which you want to create nested spies&lt;br /&gt;     * @param property - field accessors delimited by a dot - JavaBean convention&lt;br /&gt;     * @return Spy of the last object from the property path&lt;br /&gt;     */&lt;br /&gt;    protected def createNestedSpies(object, String property) {&lt;br /&gt;        def lastObject = object&lt;br /&gt;        property.tokenize('.').inject object, { obj, prop -&amp;gt;&lt;br /&gt;            if (obj[prop] == null) {&lt;br /&gt;                def foundProp = obj.metaClass.properties.find { it.name == prop }&lt;br /&gt;                obj[prop] = Spy(foundProp.type)&lt;br /&gt;            }&lt;br /&gt;            lastObject = obj[prop]&lt;br /&gt;        }&lt;br /&gt;        lastObject&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    /**&lt;br /&gt;     * The method creates nested structure of mocks for all the elements present in the property parameter. Those mocks are set on the input object.&lt;br /&gt;     *&lt;br /&gt;     * @param object - object on which you want to create nested mocks&lt;br /&gt;     * @param property - field accessors delimited by a dot - JavaBean convention&lt;br /&gt;     * @return Mock of the last object from the property path&lt;br /&gt;     */&lt;br /&gt;    protected def createNestedMocks(object, String property) {&lt;br /&gt;        def lastObject = object&lt;br /&gt;        property.tokenize('.').inject object, { obj, prop -&amp;gt;&lt;br /&gt;            def foundProp = obj.metaClass.properties.find { it.name == prop }&lt;br /&gt;            def mockedProp = Mock(foundProp.type)&lt;br /&gt;            lastObject."${prop}" &amp;gt;&amp;gt; mockedProp&lt;br /&gt;            lastObject = mockedProp&lt;br /&gt;        }&lt;br /&gt;        lastObject&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;These two methods work in a very simillar manner.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Assuming that the&amp;nbsp;method's argument&amp;nbsp;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;property &lt;/span&gt;&amp;nbsp;looks as follows: &lt;span style="font-family: Courier New, Courier, monospace;"&gt;"a.b.c.d"&lt;/span&gt; then the methods tokenize the string by &lt;span style="font-family: Courier New, Courier, monospace;"&gt;"."&lt;/span&gt; and iterate over the array - &lt;span style="font-family: Courier New, Courier, monospace;"&gt;["a","b","c","d"]&lt;/span&gt;.&amp;nbsp;&lt;/li&gt;&lt;li&gt;We then iterate over the properties of the &lt;a href="http://groovy.codehaus.org/api/groovy/lang/MetaClass.html"&gt;Meta Class&lt;/a&gt;&amp;nbsp;to find the one whose name is equal to &lt;span style="font-family: Courier New, Courier, monospace;"&gt;prop&lt;/span&gt; (for example&lt;span style="font-family: Courier New, Courier, monospace;"&gt; "a"&lt;/span&gt;).&amp;nbsp;&lt;/li&gt;&lt;li&gt;If that is the case we then use Spock's Mock/Spy method to create a Test Double of a given class (type).&amp;nbsp;&lt;/li&gt;&lt;li&gt;Finally we have to bind the mocked nested element to its parent.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;For the Spy it's easy since we set the value on the parent (&lt;span style="font-family: Courier New, Courier, monospace;"&gt;lastObject = obj[prop]&lt;/span&gt;).&amp;nbsp;&lt;/li&gt;&lt;li&gt;For the mocks however we need to use the overloaded &lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;&amp;gt;&lt;/span&gt; operator to record the behavior for our mock - that's why dynamically call the property that is present in the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;prop&lt;/span&gt; variable (&lt;span style="font-family: Courier New, Courier, monospace;"&gt;lastObject."${prop}" &amp;gt;&amp;gt; mockedProp&lt;/span&gt;).&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Then we return from the closure the mocked/spied instance and we repeat the process for it&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h2&gt;Class to be tested&lt;/h2&gt;Let's take a look at the class to be tested:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerServiceImpl.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.service;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.model.PlayerDetails;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 08.06.13&lt;br /&gt; * Time: 19:02&lt;br /&gt; */&lt;br /&gt;public class PlayerServiceImpl implements PlayerService {&lt;br /&gt;    @Override&lt;br /&gt;    public boolean isPlayerOfGivenCountry(PlayerDetails playerDetails, String country) {&lt;br /&gt;        String countryValue = playerDetails.getClubDetails().getCountry().getCountryCode().getCountryCode().value();&lt;br /&gt;        return countryValue.equalsIgnoreCase(country);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;h2&gt;The test class&lt;/h2&gt;And now the test class:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerServiceImplWrittenUsingSpockTest.groovy&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.service&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.model.*&lt;br /&gt;import com.blogspot.toomuchcoding.spock.ExtendedSpockSpecification&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 14.06.13&lt;br /&gt; * Time: 16:06&lt;br /&gt; */&lt;br /&gt;class PlayerServiceImplWrittenUsingSpockTest extends ExtendedSpockSpecification {&lt;br /&gt;&lt;br /&gt;    public static final String COUNTRY_CODE_ENG = "ENG";&lt;br /&gt;&lt;br /&gt;    PlayerServiceImpl objectUnderTest&lt;br /&gt;&lt;br /&gt;    def setup(){&lt;br /&gt;        objectUnderTest = new PlayerServiceImpl()&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    def "should return true if country code is the same when creating nested structures using groovy"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = new PlayerDetails(&lt;br /&gt;                    clubDetails: new ClubDetails(&lt;br /&gt;                            country: new CountryDetails(&lt;br /&gt;                                    countryCode: new CountryCodeDetails(&lt;br /&gt;                                            countryCode: CountryCodeType.ENG&lt;br /&gt;                                    )&lt;br /&gt;                            )&lt;br /&gt;                    )&lt;br /&gt;            )&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    def "should return true if country code is the same when creating nested structures using spock mocks - requires CGLIB for non interface types"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Mock()&lt;br /&gt;            ClubDetails clubDetails = Mock()&lt;br /&gt;            CountryDetails countryDetails = Mock()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = Mock()&lt;br /&gt;            countryCodeDetails.countryCode &amp;gt;&amp;gt; CountryCodeType.ENG&lt;br /&gt;            countryDetails.countryCode &amp;gt;&amp;gt; countryCodeDetails&lt;br /&gt;            clubDetails.country &amp;gt;&amp;gt; countryDetails&lt;br /&gt;            playerDetails.clubDetails &amp;gt;&amp;gt; clubDetails&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    def "should return true if country code is the same using ExtendedSpockSpecification's createNestedMocks"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Mock()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = createNestedMocks(playerDetails, "clubDetails.country.countryCode")&lt;br /&gt;            countryCodeDetails.countryCode &amp;gt;&amp;gt; CountryCodeType.ENG&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    def "should return false if country code is not the same using ExtendedSpockSpecification createNestedMocks"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Mock()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = createNestedMocks(playerDetails, "clubDetails.country.countryCode")&lt;br /&gt;            countryCodeDetails.countryCode &amp;gt;&amp;gt; CountryCodeType.PL&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            !playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    def "should return true if country code is the same using ExtendedSpockSpecification's createNestedSpies"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Spy()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = createNestedSpies(playerDetails, "clubDetails.country.countryCode")&lt;br /&gt;            countryCodeDetails.countryCode = CountryCodeType.ENG&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    def "should return false if country code is not the same using ExtendedSpockSpecification's createNestedSpies"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Spy()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = createNestedSpies(playerDetails, "clubDetails.country.countryCode")&lt;br /&gt;            countryCodeDetails.countryCode = CountryCodeType.PL&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            !playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;Let's move through the test methods one by one&lt;/b&gt;. First I present the code and then have a quick description of the presented snippet.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;    def "should return true if country code is the same when creating nested structures using groovy"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = new PlayerDetails(&lt;br /&gt;                    clubDetails: new ClubDetails(&lt;br /&gt;                            country: new CountryDetails(&lt;br /&gt;                                    countryCode: new CountryCodeDetails(&lt;br /&gt;                                            countryCode: CountryCodeType.ENG&lt;br /&gt;                                    )&lt;br /&gt;                            )&lt;br /&gt;                    )&lt;br /&gt;            )&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here you could find the approach of creating nested structures by using the Groovy feature of passing properties to be set in the constructor.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;    def "should return true if country code is the same when creating nested structures using spock mocks - requires CGLIB for non interface types"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Mock()&lt;br /&gt;            ClubDetails clubDetails = Mock()&lt;br /&gt;            CountryDetails countryDetails = Mock()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = Mock()&lt;br /&gt;            countryCodeDetails.countryCode &amp;gt;&amp;gt; CountryCodeType.ENG&lt;br /&gt;            countryDetails.countryCode &amp;gt;&amp;gt; countryCodeDetails&lt;br /&gt;            clubDetails.country &amp;gt;&amp;gt; countryDetails&lt;br /&gt;            playerDetails.clubDetails &amp;gt;&amp;gt; clubDetails&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here you can find a test that creates mocks using Spock - mind you that you need CGLIB as a dependency when you are mocking non interface types.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;    def "should return true if country code is the same using ExtendedSpockSpecification's createNestedMocks"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Mock()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = createNestedMocks(playerDetails, "clubDetails.country.countryCode")&lt;br /&gt;            countryCodeDetails.countryCode &amp;gt;&amp;gt; CountryCodeType.ENG&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here you have an example of creating nested mocks using the createNestedMocks method.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;    def "should return false if country code is not the same using ExtendedSpockSpecification createNestedMocks"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Mock()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = createNestedMocks(playerDetails, "clubDetails.country.countryCode")&lt;br /&gt;            countryCodeDetails.countryCode &amp;gt;&amp;gt; CountryCodeType.PL&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            !playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;An example showing that creating nested mocks using the createNestedMocks method really works - should return false for improper country code.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;    def "should return true if country code is the same using ExtendedSpockSpecification's createNestedSpies"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Spy()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = createNestedSpies(playerDetails, "clubDetails.country.countryCode")&lt;br /&gt;            countryCodeDetails.countryCode = CountryCodeType.ENG&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here you have an example of creating nested spies using the createNestedSpies method.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;    def "should return false if country code is not the same using ExtendedSpockSpecification's createNestedSpies"() {&lt;br /&gt;        given:&lt;br /&gt;            PlayerDetails playerDetails = Spy()&lt;br /&gt;            CountryCodeDetails countryCodeDetails = createNestedSpies(playerDetails, "clubDetails.country.countryCode")&lt;br /&gt;            countryCodeDetails.countryCode = CountryCodeType.PL&lt;br /&gt;&lt;br /&gt;        when:&lt;br /&gt;            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);&lt;br /&gt;&lt;br /&gt;        then:&lt;br /&gt;            !playerIsOfGivenCountry&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;An example showing that creating nested spies using the createNestedSpies method really works - should return false for improper country code.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Summary&lt;/h2&gt;In this post I have shown you how you can create nested mocks and spies using Spock. It can be useful especially when you are working with nested structures such as JAXB. Still you have to bear in mind that those structures to some extend violate the Law of Demeter. If you check my previous article about Mockito you would see that:&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;We are getting the nested elements from the JAXB generated classes. Although it violates the&amp;nbsp;&lt;a href="http://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt;&amp;nbsp;it is quite common to call methods of&amp;nbsp;&lt;b&gt;structures&lt;/b&gt;&amp;nbsp;because JAXB generated classes are in fact structures so in fact I fully agree with&amp;nbsp;&lt;a href="http://martinfowler.com/articles/mocksArentStubs.html"&gt;Martin Fowler that it should be called the Suggestion of Demeter&lt;/a&gt;.&lt;/blockquote&gt;And in case of this example the idea is the same - we are talking about structures so we don't violate the Law of Demeter.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Advantages&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;With a single method you can mock/spy nested elements&lt;/li&gt;&lt;li&gt;Code cleaner than creating tons of objects that you then have to manually set&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;b&gt;Disadvantages&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Your IDE won't help you with providing the property names since the properties are presented as Strings&lt;/li&gt;&lt;li&gt;You have to set Test Doubles only in the Specification context (and sometimes you want to go outside this scope)&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Sources&lt;/h2&gt;As usual the sources are available at&amp;nbsp;&lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/9f0f64d405a0c0b8219043df9b599f60569c1633/Unit%20Testing/Spock%20-%20Deep%20Stubs?at=default"&gt;BitBucket&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit%20Testing/Spock%20-%20Deep%20Stubs"&gt;GitHub&lt;/a&gt;.</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/1420949330182046143/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/08/spock-return-nested-spies-mocks.html#comment-form" title="2 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1420949330182046143"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1420949330182046143"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/08/spock-return-nested-spies-mocks.html" title="Spock - return nested spies / mocks"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-3AoyOo8WYuY/UgC3QJ5TuNI/AAAAAAAABkw/YJzt5EXB10s/s72-c/Spock+Deep+Stubs+project+structure.jpg" height="72" width="72"/>
  <thr:total>2</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-3169016404430834083</id>
  <published>2013-08-09T05:39:00.000-07:00</published>
  <updated>2013-08-09T05:39:53.856-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="BeanPostProcessor"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mocks"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Spies"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Spring"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="SpringJUnit4ClassRunner"/>
  <title type="text">Injecting Test Doubles in Spring using Mockito and BeanPostProcessors</title>
  <content type="html">&lt;script type="text/javascript"&gt;var dzone_style = '2';&lt;/script&gt;&lt;script language="javascript" src="http://widgets.dzone.com/links/widgets/zoneit.js"&gt;&lt;/script&gt;&lt;br /&gt;I'm pretty sure that if you have ever used Spring and are familliar with unit testing, you have encountered a problem related to injecting mocks / spies (Test Doubles) in the Spring's application context which you wouldn't want to modify. This article presents an approach how to solve this issue using Spring's components.&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;h2&gt;Project structure&lt;/h2&gt;Let's start with the project structure:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-24owAXPWDec/UgS1olJ038I/AAAAAAAABlA/O90115z1yIk/s1600/Project+structure.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://1.bp.blogspot.com/-24owAXPWDec/UgS1olJ038I/AAAAAAAABlA/O90115z1yIk/s320/Project+structure.jpg" width="207" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As usual to present a problem I'm trying to show a very simple project structure. The approach that I'm about to show could show more benefits if I made the problem more extensive as we had in our project:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;we had dozens of interfaces and implementations autowired to lists&lt;/li&gt;&lt;li&gt;we wanted to perform some functional tests basing on the existing Spring application context&amp;nbsp;&lt;/li&gt;&lt;li&gt;we wanted to verify that for certain input conditions some specific implementation would have their methods executed&amp;nbsp;&lt;/li&gt;&lt;li&gt;we wanted to stub database access.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;In this example we have a &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerService&lt;/span&gt; that gets a &lt;span style="font-family: Courier New, Courier, monospace;"&gt;Player &lt;/span&gt;using a &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerWebService&lt;/span&gt;. We have an applicationContext that simply defines packages for autowiring:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;applicationContext.xml&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;beans xmlns="http://www.springframework.org/schema/beans"&lt;br /&gt;       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;       xmlns:context="http://www.springframework.org/schema/context"&lt;br /&gt;       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&lt;br /&gt;                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;context:component-scan base-package="com.blogspot.toomuchcoding"/&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/beans&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;Then we have our very simple model:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Player.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.model;&lt;br /&gt;&lt;br /&gt;import java.math.BigDecimal;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 08.08.13&lt;br /&gt; * Time: 14:38&lt;br /&gt; */&lt;br /&gt;public final class Player {&lt;br /&gt;    private final String playerName;&lt;br /&gt;    private final BigDecimal playerValue;&lt;br /&gt;&lt;br /&gt;    public Player(final String playerName, final BigDecimal playerValue) {&lt;br /&gt;        this.playerName = playerName;&lt;br /&gt;        this.playerValue = playerValue;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public String getPlayerName() {&lt;br /&gt;        return playerName;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public BigDecimal getPlayerValue() {&lt;br /&gt;        return playerValue;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;the implementation of the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerService &lt;/span&gt;that uses &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerWebService &lt;/span&gt;to retrieve data regarding the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;Player&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerServiceImpl.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.service;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.model.Player;&lt;br /&gt;import org.slf4j.Logger;&lt;br /&gt;import org.slf4j.LoggerFactory;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.stereotype.Service;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 08.06.13&lt;br /&gt; * Time: 19:02&lt;br /&gt; */&lt;br /&gt;@Service&lt;br /&gt;public class PlayerServiceImpl implements PlayerService {&lt;br /&gt;    private static final Logger LOGGER = LoggerFactory.getLogger(PlayerServiceImpl.class);&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    private PlayerWebService playerWebService;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public Player getPlayerByName(String playerName) {&lt;br /&gt;        LOGGER.debug(String.format("Logging the player web service name [%s]", playerWebService.getWebServiceName()));&lt;br /&gt;        return playerWebService.getPlayerByName(playerName);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public PlayerWebService getPlayerWebService() {&lt;br /&gt;        return playerWebService;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void setPlayerWebService(PlayerWebService playerWebService) {&lt;br /&gt;        this.playerWebService = playerWebService;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;the implementation of the PlayerWebService that is a provider of data (in this scenario we are simulating awaiting for response):&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerWebServiceImpl.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.service;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.model.Player;&lt;br /&gt;import org.slf4j.Logger;&lt;br /&gt;import org.slf4j.LoggerFactory;&lt;br /&gt;import org.springframework.stereotype.Service;&lt;br /&gt;&lt;br /&gt;import java.math.BigDecimal;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 08.08.13&lt;br /&gt; * Time: 14:48&lt;br /&gt; */&lt;br /&gt;@Service&lt;br /&gt;public class PlayerWebServiceImpl implements PlayerWebService {&lt;br /&gt;    private static final Logger LOGGER = LoggerFactory.getLogger(PlayerWebServiceImpl.class);&lt;br /&gt;    public static final String WEB_SERVICE_NAME = "SuperPlayerWebService";&lt;br /&gt;    public static final String SAMPLE_PLAYER_VALUE = "1000";&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public String getWebServiceName() {&lt;br /&gt;        return WEB_SERVICE_NAME;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public Player getPlayerByName(String name) {&lt;br /&gt;        try {&lt;br /&gt;            LOGGER.debug("Simulating awaiting time for a response from a web service");&lt;br /&gt;            Thread.sleep(5000);&lt;br /&gt;        } catch (InterruptedException e) {&lt;br /&gt;            LOGGER.error(String.format("[%s] occurred while trying to make the thread sleep", e));&lt;br /&gt;        }&lt;br /&gt;        return new Player(name, new BigDecimal(SAMPLE_PLAYER_VALUE));&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;Perhaps the project structure and the methods are not one of the most brilliant you have ever seen but I wanted to keep it simple to present the problem ;)&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;The problem&lt;/h2&gt;So what actually is the problem? Let us assume that we want our autowired &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerWebServiceImpl&lt;/span&gt; to be a Spy that we can verify. What is more you don't want to actually change anything in the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;applicationContext.xml&lt;/span&gt; - you want to use the current version of the Spring context.&lt;br /&gt;&lt;br /&gt;With mocks it's easier since you can define in your XML file (using Mockito factory method) your bean as a mock to override the original implementation just like this:&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;    &amp;lt;bean id="playerWebServiceImpl" class="org.mockito.Mockito" factory-method="mock"&amp;gt;&lt;br /&gt;        &amp;lt;constructor-arg value="com.blogspot.toomuchcoding.service.PlayerWebServiceImpl"/&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;What about the Spy? It's more problematic since in order to create a Spy you need an already existing object of the given type. In our example we have some autowiring going on so we would have to first create a spring bean of the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerWebService &lt;/span&gt;type (Spring would have to wire all its dependencies) and then wrap it around with&lt;span style="font-family: Courier New, Courier, monospace;"&gt; Mockito.spy(...)&lt;/span&gt; and only then would it have to be wired somewhere else... It's getting very complicatied doesn't it?&lt;br /&gt;&lt;h2&gt;The solution&lt;/h2&gt;You can see that the problem is not that trivial to be solved. An easy way to fix it however is to use native Spring mechanisms - BeanPostProcessors. You can check my article about how to create a &lt;a href="http://toomuchcoding.blogspot.com/2012/10/spring-beanpostprocessor-for-specified.html"&gt;Spring BeanPostProcessor for a specified type&lt;/a&gt;&amp;nbsp;- we'll be using it in this example.&lt;br /&gt;&lt;br /&gt;Let's start with checking the test class:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerServiceImplTest.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.service;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.model.Player;&lt;br /&gt;import org.junit.Test;&lt;br /&gt;import org.junit.runner.RunWith;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.test.context.ContextConfiguration;&lt;br /&gt;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&lt;br /&gt;&lt;br /&gt;import java.math.BigDecimal;&lt;br /&gt;&lt;br /&gt;import static org.hamcrest.CoreMatchers.is;&lt;br /&gt;import static org.junit.Assert.assertThat;&lt;br /&gt;import static org.mockito.BDDMockito.doReturn;&lt;br /&gt;import static org.mockito.Mockito.verify;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 08.06.13&lt;br /&gt; * Time: 19:26&lt;br /&gt; */&lt;br /&gt;@RunWith(SpringJUnit4ClassRunner.class)&lt;br /&gt;@ContextConfiguration("classpath:testApplicationContext.xml")&lt;br /&gt;public class PlayerServiceImplTest {&lt;br /&gt;&lt;br /&gt;    public static final String PLAYER_NAME = "Lewandowski";&lt;br /&gt;    public static final BigDecimal PLAYER_VALUE = new BigDecimal("35000000");&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    PlayerWebService playerWebServiceSpy;&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    PlayerService objectUnderTest;&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void shouldReturnAPlayerFromPlayerWebService(){&lt;br /&gt;        //given&lt;br /&gt;        Player referencePlayer = new Player(PLAYER_NAME, PLAYER_VALUE);&lt;br /&gt;        doReturn(referencePlayer).when(playerWebServiceSpy).getPlayerByName(PLAYER_NAME);&lt;br /&gt;&lt;br /&gt;        //when&lt;br /&gt;        Player player = objectUnderTest.getPlayerByName(PLAYER_NAME);&lt;br /&gt;&lt;br /&gt;        //then&lt;br /&gt;        assertThat(player, is(referencePlayer));&lt;br /&gt;        verify(playerWebServiceSpy).getWebServiceName();&lt;br /&gt;        assertThat(playerWebServiceSpy.getWebServiceName(), is(PlayerWebServiceImpl.WEB_SERVICE_NAME));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;In this test we want to mock retrieval of &lt;span style="font-family: Courier New, Courier, monospace;"&gt;Player &lt;/span&gt;from the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerWebService &lt;/span&gt;(let's assume that normally it would try to send a request to the outside world - and we wouldn't want that to happen in our scenario) and test that our &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerService &lt;/span&gt;returns the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;Player &lt;/span&gt;that we provided in the method stub and what is more we want to perform verification on the Spy that the method &lt;span style="font-family: Courier New, Courier, monospace;"&gt;getWebServiceName()&lt;/span&gt; has been executed and that it has a very precisely defined return value. In other words we wanted to stub the method &lt;span style="font-family: Courier New, Courier, monospace;"&gt;getPlayerByName(...)&lt;/span&gt; and wanted to perform verification of the spy by checking the&amp;nbsp;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;getWebServiceName()&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;method.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Let's check the test context:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;testApplicationContext.xml&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;beans xmlns="http://www.springframework.org/schema/beans"&lt;br /&gt;       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;import resource="applicationContext.xml"/&amp;gt;&lt;br /&gt;    &amp;lt;bean class="com.blogspot.postprocessor.PlayerWebServicePostProcessor" /&amp;gt;&lt;br /&gt;&amp;lt;/beans&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The test context is very small since it's importing the current &lt;span style="font-family: Courier New, Courier, monospace;"&gt;applicationContext.xml&lt;/span&gt; and creating a Bean that is the key feature in this example - the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;BeanPostProcessor&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PlayerWebServicePostProcessor.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.postprocessor;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.processor.AbstractBeanPostProcessor;&lt;br /&gt;import com.blogspot.toomuchcoding.service.PlayerWebService;&lt;br /&gt;&lt;br /&gt;import static org.mockito.Mockito.spy;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * User: mgrzejszczak&lt;br /&gt; * Date: 07.05.13&lt;br /&gt; * Time: 11:30&lt;br /&gt; */&lt;br /&gt;public class PlayerWebServicePostProcessor extends AbstractBeanPostProcessor&amp;lt;PlayerWebService&amp;gt; {&lt;br /&gt;    public PlayerWebServicePostProcessor() {&lt;br /&gt;        super(PlayerWebService.class);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public PlayerWebService doBefore(PlayerWebService bean) {&lt;br /&gt;        return spy(bean);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public PlayerWebService doAfter(PlayerWebService bean) {&lt;br /&gt;        return bean;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;The class is extending the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;AbstractBeanPostProcessor &lt;/span&gt;that implements the &lt;a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html"&gt;BeanPostProcessor &lt;/a&gt;interface. The logic behind this class is to register the Class for which one wants to perform some actions either before initialization (&lt;a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html#postProcessBeforeInitialization(java.lang.Object, java.lang.String)"&gt;postProcessBeforeInitialization&lt;/a&gt;) or after initialization of the bean (&lt;a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html#postProcessAfterInitialization(java.lang.Object, java.lang.String)"&gt;postProcessAfterInitialization&lt;/a&gt;). The AbstractBeanPostProcessor is well explained in my post&amp;nbsp;&lt;a href="http://toomuchcoding.blogspot.com/2012/10/spring-beanpostprocessor-for-specified.html"&gt;Spring BeanPostProcessor for a specified type&lt;/a&gt;&amp;nbsp;but there is one slight change - in my old post we were allowed by the abstraction to perform some actions on the bean without the possibility of returning a wrapper or a proxy on the bean.&lt;br /&gt;&lt;br /&gt;As you can see in the case of &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerWebServicePostProcessor&lt;/span&gt;&amp;nbsp;before initialization we are creating a Spy using &lt;span style="font-family: Courier New, Courier, monospace;"&gt;Mockito.spy(...)&lt;/span&gt; method. In this way we create a factory hook on the intialization of beans of given type - it's as simple as that. This method will be executed for all the classes that implement the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;PlayerWebService&amp;nbsp;&lt;/span&gt;interface.&lt;br /&gt;&lt;h2&gt;Other possibilities&lt;/h2&gt;&lt;div&gt;While checking out current solutions to this problem I have encountered the &lt;a href="https://bitbucket.org/kubek2k/springockito/wiki/Home"&gt;Springockito library&lt;/a&gt;&amp;nbsp;by Jakub Janczak.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I haven't been using this so I don't know what are (if there are any ;) ) production issues related to this library but it seems really nice and intuitive - great job Jakub! Still, you become dependent on the external library whereas in this example I've shown how to deal with the issue using Spring.&lt;/div&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;div&gt;In this post I've shown how to&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;create mocks for existing beans using XML Spring configuration&lt;/li&gt;&lt;li&gt;create a BeanPostProcessor implementation that performs logic for a given class of beans&lt;/li&gt;&lt;li&gt;return Spy (you could also return a Mock) for the given class of bean&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Now let's move through the Prons and Cons of my approach:&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Advantages&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;you use Spring native mechanism to create Test Doubles for your beans&lt;/li&gt;&lt;li&gt;you are not required to add any additional external dependencies&lt;/li&gt;&lt;li&gt;if you use the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;AbstractBeanPostProcessor&lt;/span&gt; you have very little changes to implement&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Disadvantages&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;you have to be familliar with internal Spring architecture (that it uses BeanPostProcessors) - but is it a disadvantage? ;) - in fact if you use the&amp;nbsp;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;AbstractBeanPostProcessor&lt;/span&gt;&amp;nbsp;&amp;nbsp;you don't have to be familliar with it - you just have to provide the class type and actions to happen before and after initialization.&lt;/li&gt;&lt;li&gt;it's less intuitive than annotations like in&amp;nbsp;the&amp;nbsp;&lt;a href="https://bitbucket.org/kubek2k/springockito/wiki/Home"&gt;Springockito library&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h2&gt;Sources&lt;/h2&gt;The sources are available at &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/0e7f9ad4eb4c1d2500562c3634253e26fc1e3a0e/Unit%20Testing/Mockito%20-%20Injecting%20Test%20Doubles%20in%20Spring?at=default"&gt;TooMuchCoding BitBucket repository&lt;/a&gt; and &lt;a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit%20Testing/Mockito%20-%20Injecting%20Test%20Doubles%20in%20Spring"&gt;TooMuchCoding Github repository&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/3169016404430834083/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/08/injecting-test-doubles-in-spring-using.html#comment-form" title="2 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3169016404430834083"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3169016404430834083"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/08/injecting-test-doubles-in-spring-using.html" title="Injecting Test Doubles in Spring using Mockito and BeanPostProcessors"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-24owAXPWDec/UgS1olJ038I/AAAAAAAABlA/O90115z1yIk/s72-c/Project+structure.jpg" height="72" width="72"/>
  <thr:total>2</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-5109726790313159483</id>
  <published>2013-08-28T01:20:00.000-07:00</published>
  <updated>2013-08-28T01:20:00.263-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Good practices"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Unit tests"/>
  <title type="text">Mockito Instant - my book has finally been published!</title>
  <content type="html">I am very pleased to announce that my book about Mockito entitled "Mockito Instant" has finally been published! You can buy it at&amp;nbsp;&lt;a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book"&gt;Packt Publishing online shop&lt;/a&gt;.</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/5109726790313159483/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/08/mockito-instant-my-book-has-finally.html#comment-form" title="3 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/5109726790313159483"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/5109726790313159483"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/08/mockito-instant-my-book-has-finally.html" title="Mockito Instant - my book has finally been published!"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>3</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-3123801918866426595</id>
  <published>2013-09-30T13:10:00.000-07:00</published>
  <updated>2013-09-30T22:48:56.295-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Google Guava"/>
  <title type="text">Review of the Getting Started with Guava book</title>
  <content type="html">&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;Hi!&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;I didn't have much time to write posts recently (beacuse of work and my book &lt;a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book"&gt;"Mockito Instant"&lt;/a&gt;) but&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;I came across Bill Bejeck's book entitled &lt;a href="http://www.packtpub.com/getting-started-with-google-guava/book"&gt;"Getting Started with Guava"&lt;/a&gt;. After having read it I decided that I will try also to blog about computer science related books. So without any futher ado let's move to the review :)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;To begin with I really enjoyed the book's structure – one can see that the author had a clear view of the book: introduction to the functionality, its presentation with examples and a short review. By keeping such a fixed structure the reader wasn't surprised by the content in each of the chapters what made reading even more pleasant.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;Let's move quickly through the book content chapter by chapter.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;b&gt;Basic Guava Utilities&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;First of all you will be able to increase your knowledge about joining and splitting operations on collections by means of the Joiner and Splitter classes - no more unnecessary writing of loops! You will be able also to learn how to operate on Strings using&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt; CharMatcher, Charsets,&amp;nbsp;Strings which often is extremely tidious and produces a lot of boilerplate code. Next you will be able to learn about Preconditions - you won't have to write those cascades of if's in terms of defensive programming. Instead how about checking a condition and throw a runtime exception? To end with the author shows how to use Guava's utility classes to create implementation of toString, hashCode and compareTo methods.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;b&gt;Functional Programming with Guava&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this chapter the author shows how to introduce some functional approach to your Object oriented Java code with the Function, Predicate and Supplier interfaces and their corresponding utility classes Functions, Predicates and Suppliers.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;b&gt;Working with Collections&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Since the Guava library emerged from issues related with collection manipulation the author could show the best examples in this chapter. You will learn about the Collections,&amp;nbsp;FluentIterables, and Iterables utility classes. The author also mentions the Range class that you can use to represent boundaries. You will also be able to find information on other types of collections such as Bimaps (maps that aside from being navigated in the standard key to value way can be navigated from values to keys), Tables (replacement for map of maps), Multimaps (values are collections). There is also a part of the chapter related to the Ordering class that fives you additional posisbilities of working with Comparators.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Concurrency&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The issue of concurrency is a very difficult issue as such. Guava can assist you in this difficult subject in a number of was that the author depicts: the Monitor class (version of a Mutex) can help you provide the serial access to part of your code, the Futures utility class to work with Future instances and many more cool solutions ;)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Guava Cache&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The author shows several ways of creating caches, showing their statistics and how to configure them. You will also be able to learn how to register listeners for different cashe related types of events.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;The Event Bus&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The author shows how to subscribe to events by using the Google Guava's Event Bus. What I really liked about this chapter was the presentation of the reason for incorporating it in a project (loose coupling) and a sample of using it in a Spring based application.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Working with Files&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You will be able to find presentations of the utility classes and helpful solutions related to working with IO such as Files, CharStreams, ByteStreams, Readers , Writers the Closer class (elegant way of ensuring that the Closeable instance gets properly closed). The author presents the concept behind source and sinks too. So if you work a lot with files you will find plenty of cool stuff here.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Odds and Ends&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Useful classes related to creating hash codes, working with Throwables and creating your applications in a null safe way.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;I would never say that I know every aspect of Guava but I tend to use a lot of its functionalities at work. That's why I was really curious about the level of details that the author wanted to present in his book and whether I would find some really interesting details of the library that I wasn't aware of. What I found in the book was very satisfactory for me because although I was already familliar with the majority of the presented examples and functionalities, still I found plenty of those „little things” that I can use to improve my code and remove more boilerplate.&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;Speaking of which, what I really wanted to look at from the very beginning where the code samples showing how cool and helpful Guava really is. Being a true fan of unit testing I was very happy to see that the author put a lot of effort in those examples - the majority of functionalities were described by means of unit tests and showing some real life situations.&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: black;"&gt;To sum it up I think that Bill Bejeck has put a tremendous effort in writing his book and he has done the job exceptionally well. I would recommend „Getting Started with Guava” for both newbies and experts – for sure both of these groups will be very satisfied.&lt;/span&gt;&lt;/span&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/3123801918866426595/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/09/review-of-getting-started-with-guava.html#comment-form" title="3 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3123801918866426595"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3123801918866426595"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/09/review-of-getting-started-with-guava.html" title="Review of the Getting Started with Guava book"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>3</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-1965245539127090821</id>
  <published>2013-12-12T00:00:00.000-08:00</published>
  <updated>2013-12-17T00:39:23.670-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="@Primary"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Composite"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Dependency Injection"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Spring"/>
  <title type="text">Spring's @Primary annotation in action</title>
  <content type="html">&lt;script type="text/javascript"&gt;var dzone_style = '2';&lt;/script&gt;&lt;script language="javascript" src="http://widgets.dzone.com/links/widgets/zoneit.js"&gt;&lt;/script&gt;&lt;br /&gt;Spring is a framework that never stops to amaze me. It's because of the fact that it offers plenty of different solutions that allow us, developers, to complete our tasks without writing millions of lines of code. Instead we are able to do the same in a much more readable, standardized manner. In this post I will try to describe one of its features that most likely is well known to all of you but in my opinion its importance is undervalued. The feature that I'll be talking about is the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;a href="http://docs.spring.io/spring/docs/3.2.5.RELEASE/javadoc-api/org/springframework/context/annotation/Primary.html"&gt;@Primary&lt;/a&gt;&lt;/span&gt; annotation.&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;The problem&lt;/h2&gt;On a couple of projects that I was working on we have come accross a common business problem - we had a point of entry to a more complex logic - some container, that would gather the results of several other processors into a single output (something like map-filter-reduce functions from the functional programming). To some extent it resembled the &lt;a href="http://en.wikipedia.org/wiki/Composite_pattern"&gt;Composite&lt;/a&gt; pattern. Putting it all together our approach was as follows:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;We had a container that had an autowired list of processors implementing a common interface&lt;/li&gt;&lt;li&gt;Our container implemented the same interface as the elements of the autowired list&lt;/li&gt;&lt;li&gt;We wanted the client class that would use the container to have this whole processing work transparent - he is interesed only in the result&lt;/li&gt;&lt;li&gt;The processors have some logic (predicate) basing on which a processor is applicable to the current set of input data&lt;/li&gt;&lt;li&gt;The results of the processing were then combined into a list and then reduced to a single output&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;There are numerous ways of dealing with this issue - I'll present one that uses Spring with the &lt;span style="font-family: Courier New, Courier, monospace;"&gt;@Primary&lt;/span&gt; annotation.&lt;/div&gt;&lt;h2&gt;The solution&lt;/h2&gt;Let's start with defining how our use case will fit to the aforementioned preconditions. Our set of data is a Person class that looks as follows:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Person.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.person.domain;&lt;br /&gt;&lt;br /&gt;public final class Person {&lt;br /&gt; private final String name;&lt;br /&gt; private final int age;&lt;br /&gt; private final boolean stupid;&lt;br /&gt;&lt;br /&gt; public Person(String name, int age, boolean stupid) {&lt;br /&gt;  this.name = name;&lt;br /&gt;  this.age = age;&lt;br /&gt;  this.stupid = stupid;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getName() {&lt;br /&gt;  return name;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int getAge() {&lt;br /&gt;  return age;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public boolean isStupid() {&lt;br /&gt;  return stupid;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;Nothing out of the ordinary. Now let us define the contract:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PersonProcessingService.java&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.person.service;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.person.domain.Person;&lt;br /&gt;&lt;br /&gt;public interface PersonProcessingService {&lt;br /&gt; boolean isApplicableFor(Person person);&lt;br /&gt; String process(Person person);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;As stated in the preconditions each implementaiton of the PersonProcessingService has to define two points of the contract :&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;whether it is applicable for the current Person&amp;nbsp;&lt;/li&gt;&lt;li&gt;how it processess a Person.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;Now let's take a look at some of the Processors that we have - I'll not post the code here cause it's pointless - you can check out the code later on &lt;a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Spring/Primary"&gt;Github&lt;/a&gt; or on &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/6c9b91a33f7d40032ff7c650d17bf60bd8c34625/Spring/Primary/?at=default"&gt;Bitbucket&lt;/a&gt;. We have the following @Component annotated implementations of PersonProcessingService:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;AgePersonProcessingService&lt;/li&gt;&lt;ul&gt;&lt;li&gt;is applicable if Person's age is greater or equal 18&lt;/li&gt;&lt;li&gt;returns a String containing "AGE" as processing takes place - that's kind of silly but it's just a demo right? :)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;IntelligencePersonProcessingService&lt;/li&gt;&lt;ul&gt;&lt;li&gt;is applicable if a Person is stupid&lt;/li&gt;&lt;li&gt;returns a String containing "STUPID" as processing takes place&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;NamePersonProcessingService&lt;/li&gt;&lt;ul&gt;&lt;li&gt;is applicable if a Person has a name&lt;/li&gt;&lt;li&gt;returns a String containing "NAME" as processing takes place&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;The logic is fairly simple. Now our container of PersonProcessingServices would want to iterate for a given Person over the processors, check if the current processor is applicable (filter) and if that is the case add the String that is a result of processing of a Person to the list of responses (map - a function converting a Person to a String) and finaly join those responses by a comma (reduce). Let's check it out how it's done:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PersonProcessingServiceContainer.java&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.person.service;&lt;br /&gt;&lt;br /&gt;import java.util.ArrayList;&lt;br /&gt;import java.util.List;&lt;br /&gt;&lt;br /&gt;import org.apache.commons.lang.StringUtils;&lt;br /&gt;import org.slf4j.Logger;&lt;br /&gt;import org.slf4j.LoggerFactory;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.context.annotation.Primary;&lt;br /&gt;import org.springframework.stereotype.Component;&lt;br /&gt;&lt;br /&gt;import com.blogspot.toomuchcoding.person.domain.Person;&lt;br /&gt;&lt;br /&gt;@Component&lt;br /&gt;@Primary&lt;br /&gt;class PersonProcessingServiceContainer implements PersonProcessingService {&lt;br /&gt;&lt;br /&gt; private static final Logger LOGGER = LoggerFactory.getLogger(PersonProcessingServiceContainer.class);&lt;br /&gt; &lt;br /&gt; @Autowired&lt;br /&gt; private List&amp;lt;PersonProcessingService&amp;gt; personProcessingServices = new ArrayList&amp;lt;PersonProcessingService&amp;gt;();&lt;br /&gt; &lt;br /&gt; @Override&lt;br /&gt; public boolean isApplicableFor(Person person) {&lt;br /&gt;  return person != null;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public String process(Person person) {&lt;br /&gt;  List&amp;lt;String&amp;gt; output = new ArrayList&amp;lt;String&amp;gt;();&lt;br /&gt;  for(PersonProcessingService personProcessingService : personProcessingServices){&lt;br /&gt;   if(personProcessingService.isApplicableFor(person)){&lt;br /&gt;    output.add(personProcessingService.process(person));&lt;br /&gt;   }&lt;br /&gt;  }&lt;br /&gt;  String result = StringUtils.join(output, ",");&lt;br /&gt;  LOGGER.info(result);&lt;br /&gt;  return result;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public List&amp;lt;PersonProcessingService&amp;gt; getPersonProcessingServices() {&lt;br /&gt;  return personProcessingServices;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;As you can see we have a container that is annotated with @Primary which means that if an implementation of the PersonProcessingService will have to be injected then Spring will pick the PersonProcessingServiceContainer to be injected. The cool thing is that we have an autowired list of PersonProcessingServices which means that all other implementations of that interface will get autowired there (the container will not autowire itself to the list!).&lt;br /&gt;&lt;br /&gt;Now let's check out the &lt;a href="https://code.google.com/p/spock/"&gt;Spock tests&lt;/a&gt; that prove that I'm not telling any lies. If you aren't using Spock already in your project then you should move it straight away :)&lt;br /&gt;&lt;br /&gt;&lt;b&gt;PersonProcessingServiceContainerIntegrationSpec.groovy&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.blogspot.toomuchcoding.person.service&lt;br /&gt;import com.blogspot.toomuchcoding.configuration.SpringConfiguration&lt;br /&gt;import com.blogspot.toomuchcoding.person.domain.Person&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired&lt;br /&gt;import org.springframework.test.context.ContextConfiguration&lt;br /&gt;import spock.lang.Specification&lt;br /&gt;import spock.lang.Unroll&lt;br /&gt;&lt;br /&gt;import static org.hamcrest.CoreMatchers.notNullValue&lt;br /&gt;&lt;br /&gt;@ContextConfiguration(classes = [SpringConfiguration])&lt;br /&gt;class PersonProcessingServiceContainerIntegrationSpec extends Specification {&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    PersonProcessingService personProcessingService&lt;br /&gt;    &lt;br /&gt;    def "should autowire container even though there are many implementations of service"(){       &lt;br /&gt;        expect: &lt;br /&gt;            personProcessingService instanceof PersonProcessingServiceContainer&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    def "the autowired container should not have itself in the list of autowired services"(){       &lt;br /&gt;        expect: &lt;br /&gt;            personProcessingService instanceof PersonProcessingServiceContainer&lt;br /&gt;        and:&lt;br /&gt;            !(personProcessingService as PersonProcessingServiceContainer).personProcessingServices.findResult {&lt;br /&gt;                it instanceof PersonProcessingServiceContainer&lt;br /&gt;            }&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    def "should not be applicable for processing if a person doesn't exist"(){&lt;br /&gt;        given:&lt;br /&gt;            Person person = null&lt;br /&gt;        expect:&lt;br /&gt;            !personProcessingService.isApplicableFor(person)&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    def "should return an empty result for a person not applicable for anything"(){&lt;br /&gt;        given:&lt;br /&gt;            Person person = new Person("", 17, false)&lt;br /&gt;        when:&lt;br /&gt;            def result = personProcessingService.process(person)&lt;br /&gt;        then:&lt;br /&gt;            result notNullValue()&lt;br /&gt;            result.isEmpty()&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Unroll("For name [#name], age [#age] and being stupid [#stupid] the result should contain keywords #keywords")&lt;br /&gt;    def "should perform different processing depending on input"(){&lt;br /&gt;        given:&lt;br /&gt;            Person person = new Person(name, age, stupid)&lt;br /&gt;        when:&lt;br /&gt;            def result = personProcessingService.process(person)        &lt;br /&gt;        then:&lt;br /&gt;            keywords.every {&lt;br /&gt;                result.contains(it)    &lt;br /&gt;            }&lt;br /&gt;        where:&lt;br /&gt;            name  | age | stupid || keywords&lt;br /&gt;            "jan" | 20  | true   || ['NAME', 'AGE', 'STUPID']&lt;br /&gt;            ""    | 20  | true   || ['AGE', 'STUPID']&lt;br /&gt;            ""    | 20  | false  || ['AGE']&lt;br /&gt;            null  | 17  | true   || ['STUPID']&lt;br /&gt;            "jan" | 17  | true   || ['NAME']&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;The tests are pretty straight forward:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;We prove that the autowired field is in fact our container - the PersonProcessingServiceContainer.&lt;/li&gt;&lt;li&gt;Then we show that we can't find an object in the collection of autowired implementations of the PersonProcessingService, that is of PersonProcessingServiceContainer type&lt;/li&gt;&lt;li&gt;In the next two tests we prove that the logic behind our processors is working&lt;/li&gt;&lt;li&gt;Last but not least is the Spock's finest - the where clause that allows us create beautiful paramterized tests.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Per module feature&lt;/h2&gt;&lt;div&gt;Imagine the situation in which you have an implementation of the interface that is defined in your core module.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;@Component&lt;br /&gt;class CoreModuleClass implements SomeInterface {&lt;br /&gt;...&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;What if you decide in your other module that has the dependence to the core module that you don't want to use this CoreModuleClass and want to have some custom logic wherever the SomeInterface is autowired? Well - use @Primary!&lt;br /&gt;&lt;pre class="brush:java"&gt;@Component&lt;br /&gt;@Primary&lt;br /&gt;class CountryModuleClass implements SomeInterface {&lt;br /&gt;...&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;In that way you are sure that wherever the SomeInterface has to be autowired it will be your CountryModuleClass that will be injected in the field.&lt;br /&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;In this post you could see how to&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;use the @Primary annotation to create a composite like container of interface implementations&lt;/li&gt;&lt;li&gt;use the @Primary annotation to provide a per module implementation of the interface that will take precedence over other @Components in terms of autowiring&lt;/li&gt;&lt;li&gt;write cool Spock tests :)&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;The code&lt;/h2&gt;You can find the code presented here on&amp;nbsp;&lt;a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Spring/Primary"&gt;Too Much Coding's Github repository&lt;/a&gt;&amp;nbsp;or on&amp;nbsp;&lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/6c9b91a33f7d40032ff7c650d17bf60bd8c34625/Spring/Primary/?at=default"&gt;Too Much Coding's Bitbucket repository&lt;/a&gt;.</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/1965245539127090821/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/12/springs-primary-annotation-in-action.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1965245539127090821"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1965245539127090821"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/12/springs-primary-annotation-in-action.html" title="Spring&amp;#39;s @Primary annotation in action"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-7147234039019092358</id>
  <published>2013-12-16T14:47:00.002-08:00</published>
  <updated>2013-12-16T22:49:12.510-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Book review"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="PowerMock"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="TDD"/>
  <title type="text">Review of the Instant Mock Testing with PowerMock</title>
  <content type="html">Hi!&lt;br /&gt;&lt;br /&gt;Quite recently I was asked by Packt publishing to write a review of the book &lt;a href="http://bit.ly/181GmFv"&gt;Instant Mock Testing with PowerMock&lt;/a&gt; by&amp;nbsp;Deep Shah. I have just managed to go through it and would like to share my thoughts :)&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;h2&gt;The layout&lt;/h2&gt;&lt;br /&gt;I enjoyed the book's layout with clear separation of the discussed issues with level of expertise required for the given section. What was also really nice was the precise division of content into the introductory part and the concrete solution to the problem.&lt;br /&gt;&lt;h2&gt;What I liked&lt;/h2&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;PowerMock is a very powerful tool that allows to test legacy code that was very badly written. On the other hand it can be tempting not to refactor existing code or even write bad code from the very beginning. So after this long introduction what I liked was that the author emphasised at the beginning of some chapters how a proper design should look like and that PowerMock breaks the rule&lt;/li&gt;&lt;li&gt;Names of test methods in the shown examples - they are very clear and teach good practices&lt;/li&gt;&lt;li&gt;Important parts of code are shown in bold - it attracts the reader and makes him focus immediately on the crucial elements&lt;/li&gt;&lt;li&gt;The examples clearly present the solution to the given problem&lt;/li&gt;&lt;li&gt;That I could learn about the PowerMock's &lt;i&gt;suppress&lt;/i&gt; functionality :)&lt;/li&gt;&lt;li&gt;I had all the important PowerMock features in one place written in a concise and readable manner&lt;/li&gt;&lt;li&gt;Very thorough explanations for beginners in terms of adding PowerMock to Eclipse or IntelliJ&lt;/li&gt;&lt;li&gt;Introductory sections of each recipie (for example introducing the Active Record pattern)&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;What I didn't like&lt;/h2&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;It's a very subjective opinion but I definitely prefer creating assertions through &lt;span style="font-family: Courier New, Courier, monospace;"&gt;assertThat&lt;/span&gt; methods with proper matchers instead of using &lt;span style="font-family: Courier New, Courier, monospace;"&gt;assertEquals&lt;/span&gt;, &lt;span style="font-family: Courier New, Courier, monospace;"&gt;assertNull&lt;/span&gt; etc.&lt;/li&gt;&lt;li&gt;Not sure if that many javadocs were needed in the examples - for me they blur the image&lt;/li&gt;&lt;li&gt;On one hand the tests seem clean but on the other there are test scenarios in which the implementation is being tested instead of behaviour (for example in stubbing/verifying private methods or in partial mocking with spies). Of course I understand that sometimes it's done if we really care about some method execution or for the sake of showing PowerMock capabilities but in some cases&amp;nbsp;(e.g. Partial mocking with spies)&amp;nbsp;the refactoring process is not clear to me.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;I really enjoyed the book&amp;nbsp;&lt;a href="http://www.packtpub.com/mock-testing-with-powermock/book"&gt;Instant Mock Testing with PowerMock&lt;/a&gt;&amp;nbsp;by&amp;nbsp;Deep Shah because I like books related to computer science :) I'm pretty sure that someone that reads it will know about all the important PowerMock's features - Deep Shah did a good job here. I would however recommend that one reads the PowerMock's documentation first, especially the &lt;a href="https://code.google.com/p/powermock/wiki/Motivation"&gt;when to use it part&lt;/a&gt;&amp;nbsp;since as authors state it:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style="background-color: white; font-family: arial, sans-serif; font-size: 13px; line-height: 16.390625px;"&gt;... PowerMock is mainly intended for people with expert knowledge in unit testing. Putting it in the hands of junior developers may cause more harm than good.&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;Also there is good tutorial&amp;nbsp;&lt;a href="http://www.jayway.com/2013/03/05/beyond-mocking-with-powermock/"&gt;recommended by the PowerMock's authors&lt;/a&gt;&amp;nbsp;and if you are a Mockito user you can profit from the &lt;a href="https://code.google.com/p/powermock/wiki/MockitoUsage13"&gt;Mockito usage at the project's wiki&lt;/a&gt;&amp;nbsp;(although the examples there are not that specific as in Deep Shah's book).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/7147234039019092358/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2013/12/review-of-instant-mock-testing-with.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/7147234039019092358"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/7147234039019092358"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2013/12/review-of-instant-mock-testing-with.html" title="Review of the Instant Mock Testing with PowerMock"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-1173059433337863131</id>
  <published>2014-02-04T14:50:00.002-08:00</published>
  <updated>2014-02-12T13:57:12.308-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="AST"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="AST transforms"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Category"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Groovy"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mixin"/>
  <title type="text">Introduction to Groovy runtime metaprogramming and AST transforms</title>
  <content type="html">Hi!&lt;br /&gt;&lt;br /&gt;I'm very happy to share my presentation regarding &lt;b&gt;&lt;i&gt;Groovy metaprogramming and AST transforms&lt;/i&gt;&lt;/b&gt;. The slides are available at &lt;a href="http://www.slideshare.net/MarcinGrzejszczak/introduction-to-groovy-runtime-metaprogramming-and-ast-transforms"&gt;SlideShare&lt;/a&gt;&amp;nbsp;and the code is available at &lt;a href="https://bitbucket.org/gregorin1987/too-much-coding/src/e5ab7c69ab7b2796075fd6f087fbf31346aa2d2b/Groovy/ast/?at=default"&gt;TooMuchCoding Bitbucket&lt;/a&gt;&amp;nbsp;and &lt;a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Groovy/ast"&gt;TooMuchCoding Github&lt;/a&gt; repositories. If you have any problems with reading any part of the slides or sth just post a comment here and I'll tr to help you :)&lt;br /&gt;&lt;br /&gt;Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;iframe allowfullscreen="" frameborder="0" height="356" marginheight="0" marginwidth="0" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/30820561" style="border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px; max-width: 100%;" width="427"&gt; &lt;/iframe&gt; &lt;br /&gt;&lt;div style="margin-bottom: 5px;"&gt;&lt;strong&gt; &lt;a href="https://www.slideshare.net/MarcinGrzejszczak/introduction-to-groovy-runtime-metaprogramming-and-ast-transforms" target="_blank" title="Introduction to Groovy runtime metaprogramming and AST transforms"&gt;Introduction to Groovy runtime metaprogramming and AST transforms&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/MarcinGrzejszczak" target="_blank"&gt;Marcin Grzejszczak&lt;/a&gt;&lt;/strong&gt; &lt;br /&gt;&lt;br /&gt;I had a discussion with one of the readers regarding issues related to creating an AST transformation that would be used on classes (and not on scripts). Often you can see that such a transformation does not work for you even though it should. The problem might be that you have the AST transformation compiled in the same time toghether with the class that you annotated with AST transformation related annotation.&lt;br /&gt;&lt;br /&gt;What you have to remember about is that your AST transformation related classes have to be compiled prior to using (that's why you can often find that your AST transformation is working when you right click on your annotated class in your IDE (or Groovy console) and manually compile that particular class. That's because you compile that particular class when other classes have already been compiled. That's the very same scenario as with compiling a script that is using an AST transformation - first your tranformations are compiled and afterwards at runtime the script gets compiled.&lt;br /&gt;&lt;br /&gt;Please check the additional repository &lt;a href="https://github.com/marcingrzejszczak/ast_examples"&gt;ast_examples&lt;/a&gt; that consists of the same examples as in the &lt;a href="https://github.com/marcingrzejszczak/too-much-coding"&gt;TooMuchCoding &lt;/a&gt;repository together with an additional AST transformation that is set on a class.&lt;/div&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/1173059433337863131/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2014/02/introduction-to-groovy-runtime.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1173059433337863131"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1173059433337863131"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2014/02/introduction-to-groovy-runtime.html" title="Introduction to Groovy runtime metaprogramming and AST transforms"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-3906783327199951392</id>
  <published>2014-02-19T14:39:00.002-08:00</published>
  <updated>2014-02-20T13:58:59.946-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Groovy"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="MarkupBuilder"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="XML"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="XmlSlurper"/>
  <title type="text">Warsaw Groovy User Group talk</title>
  <content type="html">Hi!&lt;br /&gt;&lt;br /&gt;Since tomorrow I'm giving a talk on XML transformations in Groovy I'd like to publish the code that will be presented during the presentation. Check out the &lt;a href="https://github.com/marcingrzejszczak/groovy-xml"&gt;Github repo&lt;/a&gt;&amp;nbsp;and the &lt;a href="https://bitbucket.org/gregorin1987/groovy-xml"&gt;Bitbucket repository&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The presentation (in polish) can be found on &lt;a href="https://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=MGu0HHzROxA#t=2109"&gt;youtube&lt;/a&gt;.</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/3906783327199951392/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2014/02/warsaw-groovy-user-group-talk.html#comment-form" title="3 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3906783327199951392"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3906783327199951392"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2014/02/warsaw-groovy-user-group-talk.html" title="Warsaw Groovy User Group talk"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>3</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-5429745963643788513</id>
  <published>2014-03-21T01:19:00.000-07:00</published>
  <updated>2014-03-21T01:19:18.313-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="AST"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="AST transforms"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="WGUG"/>
  <title type="text">Warsaw Groovy User Group Talk - AST Transformations</title>
  <content type="html">Hi!&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.youtube.com/watch?v=JdSCDEkX0Tw"&gt;Click here to go to the on-air hangout (in PL) regarding AST Transformations from my yesterday's presentation on Warsaw Groovy User Group&lt;/a&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/5429745963643788513/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2014/03/warsaw-groovy-user-group-talk-ast.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/5429745963643788513"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/5429745963643788513"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2014/03/warsaw-groovy-user-group-talk-ast.html" title="Warsaw Groovy User Group Talk - AST Transformations"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-7900973814235057723</id>
  <published>2014-04-24T08:34:00.001-07:00</published>
  <updated>2014-04-24T08:34:29.356-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="AST"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="AST transforms"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Groovy"/>
  <title type="text">Groovy Builder AST merged to Groovy Core!</title>
  <content type="html">&lt;p dir=ltr&gt;Hi! &lt;/p&gt;&lt;p dir=ltr&gt;Today it turned out that Paul King merged the Builder AST transform that based on my &lt;a href="https://github.com/groovy/groovy-core/pull/341"&gt;PojoBuilder&lt;/a&gt; to core of Groovy. So you will be able to use it when the new version of Groovy gets released.&lt;/p&gt;&lt;p dir=ltr&gt;You can take a look at the code here&lt;/p&gt;&lt;p dir=ltr&gt;&lt;a href="https://github.com/groovy/groovy-core/pull/389"&gt;https://github.com/groovy/groovy-core/pull/389&lt;/a&gt;&lt;/p&gt;&lt;p dir=ltr&gt;Many thanks go to &lt;a href="http://solidsoft.wordpress.com"&gt;&lt;b&gt;Marcin Zaj&amp;#261;czkowski&lt;/b&gt;&lt;/a&gt; for his code review to the initial version.&lt;/p&gt;&lt;p dir=ltr&gt;It's not the biggest features in the world but anyway, enjoy :)&lt;/p&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/7900973814235057723/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2014/04/groovy-builder-ast-merged-to-groovy-core.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/7900973814235057723"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/7900973814235057723"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2014/04/groovy-builder-ast-merged-to-groovy-core.html" title="Groovy Builder AST merged to Groovy Core!"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-5945839403353710587</id>
  <published>2014-06-04T11:57:00.005-07:00</published>
  <updated>2014-06-04T11:58:06.910-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="GitHub"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito"/>
  <title type="text">Mockito Instant Code Repo at Github</title>
  <content type="html">Hi!&lt;br /&gt;&lt;br /&gt;Since I was asked for the code to the&lt;a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book"&gt; "Mockito Instant"&lt;/a&gt; book a couple of times I decided to place it on Github. Here is the link - &lt;a href="https://github.com/marcingrzejszczak/mockito-instant"&gt;https://github.com/marcingrzejszczak/mockito-instant&lt;/a&gt;. Enjoy :)</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/5945839403353710587/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2014/06/mockito-instant-code-repo-at-github.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/5945839403353710587"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/5945839403353710587"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2014/06/mockito-instant-code-repo-at-github.html" title="Mockito Instant Code Repo at Github"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-1622213725349764483</id>
  <published>2014-06-12T14:15:00.001-07:00</published>
  <updated>2014-06-13T23:53:31.234-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito Cookbook"/>
  <title type="text">Pre-order Mockito Cookbook!!</title>
  <content type="html">&lt;script type="text/javascript"&gt;var dzone_style = '2';&lt;/script&gt;&lt;script language="javascript" src="http://widgets.dzone.com/links/widgets/zoneit.js"&gt;&lt;/script&gt;&lt;br /&gt;Hi!&lt;br /&gt;&lt;br /&gt;I'm pleased to announce that you can already pre-order my new book &lt;a href="https://www.packtpub.com/mockito-cookbook/book"&gt;Mockito Cookbook&lt;/a&gt;. You can buy it on &lt;a href="https://www.packtpub.com/mockito-cookbook/book"&gt;Packt Publishing's website&lt;/a&gt;. The whole code from the book + plenty of extras are available at &lt;a href="https://github.com/marcingrzejszczak/mockito-cookbook"&gt;Github over here&lt;/a&gt;. Enjoy :)</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/1622213725349764483/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2014/06/pre-order-mockito-cookbook.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1622213725349764483"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1622213725349764483"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2014/06/pre-order-mockito-cookbook.html" title="Pre-order Mockito Cookbook!!"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-7473116961489840089</id>
  <published>2014-06-25T10:34:00.000-07:00</published>
  <updated>2014-06-25T10:34:07.890-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Mockito Cookbook"/>
  <title type="text">Mockito Cookbook is out!!</title>
  <content type="html">&lt;script type="text/javascript"&gt;var dzone_style = '2';&lt;/script&gt;&lt;script language="javascript" src="http://widgets.dzone.com/links/widgets/zoneit.js"&gt;&lt;/script&gt;&lt;br /&gt;I'm very pleased to announce that you can order my new book&lt;a href="https://www.packtpub.com/mockito-cookbook/book"&gt; Mockito Cookbook&lt;/a&gt; here &lt;a href="https://www.packtpub.com/mockito-cookbook/book"&gt;https://www.packtpub.com/mockito-cookbook/book&lt;/a&gt; . I hope that you will enjoy it :)</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/7473116961489840089/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2014/06/mockito-cookbook-is-out.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/7473116961489840089"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/7473116961489840089"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2014/06/mockito-cookbook-is-out.html" title="Mockito Cookbook is out!!"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-1098782853827055556</id>
  <published>2014-10-27T14:39:00.004-07:00</published>
  <updated>2014-10-27T14:39:52.749-07:00</updated>
  <title type="text">New personal website</title>
  <content type="html">Hi!&lt;br /&gt;&lt;br /&gt;I've just changed my website so feel free to check it out :) &lt;a href="http://www.marcin.grzejszczak.pl/"&gt;http://www.marcin.grzejszczak.pl/&lt;/a&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/1098782853827055556/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2014/10/new-personal-website.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1098782853827055556"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/1098782853827055556"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2014/10/new-personal-website.html" title="New personal website"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-7259908936996599118</id>
  <published>2014-12-17T14:28:00.000-08:00</published>
  <updated>2014-12-17T14:28:14.147-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="GitHub"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Gradle"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Groovy"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Spock"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Subject-Collaborators-Extension"/>
  <title type="text">Spock Subject Collaborators Extension 1.0.1 released!</title>
  <content type="html">Hi!&lt;br /&gt;&lt;br /&gt;I'm really happy to say that I've just released a new version 1.0.1 of the &lt;a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension"&gt;Spock Subject Collaborators Extension&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The changelog is as follows:&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h2 style="border-bottom-color: rgb(238, 238, 238); border-bottom-style: solid; border-bottom-width: 1px; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.75em; line-height: 1.225; margin-bottom: 16px; margin-top: 0px !important; padding-bottom: 0.3em; position: relative;"&gt;&lt;a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/tree/1.0.1" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;"&gt;1.0.1&lt;/a&gt;&lt;/h2&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;Bug fixes:&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;&lt;a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/issues/3" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;"&gt;#3&lt;/a&gt;&amp;nbsp;Make plugin compatible with Spock 1.0.0-SNAPSHOT&lt;/div&gt;&lt;h2 style="border-bottom-color: rgb(238, 238, 238); border-bottom-style: solid; border-bottom-width: 1px; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.75em; line-height: 1.225; margin-bottom: 16px; margin-top: 1em; padding-bottom: 0.3em; position: relative;"&gt;&lt;a aria-hidden="true" class="anchor" href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/blob/master/CHANGELOG.md#100" id="user-content-100" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; bottom: 0px; box-sizing: border-box; color: #4183c4; display: block; left: 0px; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"&gt;&lt;/a&gt;&lt;a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/tree/1.0.0" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;"&gt;1.0.0&lt;/a&gt;&lt;/h2&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;New features:&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;"&gt;&lt;a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/issues/1" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;"&gt;#1&lt;/a&gt;&amp;nbsp;Inject superclass fields - now you can inject fields to your superclass&lt;/div&gt;&lt;br /&gt;As you can see now you'll be able to use this extension together with Spock in version 1.0.0 (assuming that nothing will change until then).&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;How to get it?&lt;/h2&gt;&lt;h3 style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.5em; line-height: 1.43; margin-bottom: 16px; margin-top: 1em; position: relative;"&gt;For Maven:&lt;/h3&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;Add JCenter repository:&lt;/div&gt;&lt;div class="highlight highlight-xml" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;&amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;repositories&lt;/span&gt;&amp;gt;&lt;br /&gt;    &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;repository&lt;/span&gt;&amp;gt;&lt;br /&gt;        &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;snapshots&lt;/span&gt;&amp;gt;&lt;br /&gt;            &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;enabled&lt;/span&gt;&amp;gt;false&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;enabled&lt;/span&gt;&amp;gt;&lt;br /&gt;        &amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;snapshots&lt;/span&gt;&amp;gt;&lt;br /&gt;        &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;id&lt;/span&gt;&amp;gt;central&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;id&lt;/span&gt;&amp;gt;&lt;br /&gt;        &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;name&lt;/span&gt;&amp;gt;bintray&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;name&lt;/span&gt;&amp;gt;&lt;br /&gt;        &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;url&lt;/span&gt;&amp;gt;http://jcenter.bintray.com&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;url&lt;/span&gt;&amp;gt;&lt;br /&gt;    &amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;repository&lt;/span&gt;&amp;gt;&lt;br /&gt;&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;repositories&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;Add dependency:&lt;/div&gt;&lt;div class="highlight highlight-xml" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;&amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;dependency&lt;/span&gt;&amp;gt;&lt;br /&gt;      &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;groupId&lt;/span&gt;&amp;gt;com.blogspot.toomuchcoding&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;groupId&lt;/span&gt;&amp;gt;&lt;br /&gt;      &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;artifactId&lt;/span&gt;&amp;gt;spock-subjects-collaborators-extension&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;artifactId&lt;/span&gt;&amp;gt;&lt;br /&gt;      &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;version&lt;/span&gt;&amp;gt;1.0.1&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;version&lt;/span&gt;&amp;gt;&lt;br /&gt;      &amp;lt;&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;scope&lt;/span&gt;&amp;gt;test&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;scope&lt;/span&gt;&amp;gt;&lt;br /&gt;&amp;lt;/&lt;span class="pl-ent" style="box-sizing: border-box; color: #63a35c;"&gt;dependency&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.5em; line-height: 1.43; margin-bottom: 16px; margin-top: 1em; position: relative;"&gt;&lt;a aria-hidden="true" class="anchor" href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/blob/master/README.md#for-gradle" id="user-content-for-gradle" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; bottom: 0px; box-sizing: border-box; color: #4183c4; display: block; left: 0px; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"&gt;&lt;/a&gt;For Gradle:&lt;/h3&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;Add JCenter repository:&lt;/div&gt;&lt;div class="highlight highlight-gradle" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;&lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;repositories&lt;/span&gt; {&lt;br /&gt;    jcenter()&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;Add dependency:&lt;/div&gt;&lt;div class="highlight highlight-gradle" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;&lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;dependencies&lt;/span&gt; {&lt;br /&gt;    testCompile &lt;span class="pl-s1" style="box-sizing: border-box; color: #df5000;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;com.blogspot.toomuchcoding:spock-subjects-collaborators-extension:1.0.1&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;How to use it?&lt;/h2&gt;&lt;div&gt;Below you have an example of usage:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;package&lt;/span&gt; &lt;span class="pl-smp" style="box-sizing: border-box;"&gt;com.blogspot.toomuchcoding.spock.subjcollabs&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; &lt;span class="pl-smi" style="box-sizing: border-box;"&gt;spock.lang.Specification&lt;/span&gt;&lt;br /&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; &lt;span class="pl-smi" style="box-sizing: border-box;"&gt;com.blogspot.toomuchcoding.spock.subjcollabs.Collaborator&lt;/span&gt;&lt;br /&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;import&lt;/span&gt; &lt;span class="pl-smi" style="box-sizing: border-box;"&gt;com.blogspot.toomuchcoding.spock.subjcollabs.Subject&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="pl-s" style="box-sizing: border-box; color: #a71d5d;"&gt;class&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;ConstructorInjectionSpec&lt;/span&gt; &lt;span class="pl-s" style="box-sizing: border-box; color: #a71d5d;"&gt;extends&lt;/span&gt; &lt;span class="pl-e" style="box-sizing: border-box; color: #795da3;"&gt;Specification&lt;/span&gt; {&lt;br /&gt;&lt;br /&gt;    &lt;span class="pl-s" style="box-sizing: border-box; color: #a71d5d;"&gt;public&lt;/span&gt; &lt;span class="pl-s" style="box-sizing: border-box; color: #a71d5d;"&gt;static&lt;/span&gt; &lt;span class="pl-s" style="box-sizing: border-box; color: #a71d5d;"&gt;final&lt;/span&gt; &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;String&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;TEST_METHOD_1&lt;/span&gt; &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; &lt;span class="pl-s1" style="box-sizing: border-box; color: #df5000;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;Test method 1&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;SomeOtherClass&lt;/span&gt; someOtherClassNotToBeInjected &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;Mock&lt;/span&gt;()&lt;br /&gt;&lt;br /&gt;    &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;@Collaborator&lt;/span&gt;&lt;br /&gt;    &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;SomeOtherClass&lt;/span&gt; someOtherClass &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;Mock&lt;/span&gt;()&lt;br /&gt;&lt;br /&gt;    &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;@Subject&lt;/span&gt;&lt;br /&gt;    &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;SomeClass&lt;/span&gt; systemUnderTest&lt;br /&gt;&lt;br /&gt;    &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;def&lt;/span&gt; &lt;span class="pl-s1" style="box-sizing: border-box; color: #df5000;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;should inject collaborator into subject&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;&lt;/span&gt;() {&lt;br /&gt;        &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;given&lt;/span&gt;:&lt;br /&gt;            someOtherClass&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;.&lt;/span&gt;someMethod() &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;TEST_METHOD_1&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;when&lt;/span&gt;:&lt;br /&gt;            &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;String&lt;/span&gt; firstResult &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; systemUnderTest&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;.&lt;/span&gt;someOtherClass&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;.&lt;/span&gt;someMethod()&lt;br /&gt;&lt;br /&gt;        &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;then&lt;/span&gt;:&lt;br /&gt;            firstResult &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;==&lt;/span&gt; &lt;span class="pl-c1" style="box-sizing: border-box; color: #0086b3;"&gt;TEST_METHOD_1&lt;/span&gt;&lt;br /&gt;            systemUnderTest&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;.&lt;/span&gt;someOtherClass &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;==&lt;/span&gt; someOtherClass&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="pl-s" style="box-sizing: border-box; color: #a71d5d;"&gt;class&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;SomeClass&lt;/span&gt; {&lt;br /&gt;        &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;SomeOtherClass&lt;/span&gt; someOtherClass&lt;br /&gt;&lt;br /&gt;        &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;SomeClass&lt;/span&gt;(&lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;SomeOtherClass&lt;/span&gt; &lt;span class="pl-v" style="box-sizing: border-box; color: #df5000;"&gt;someOtherClass&lt;/span&gt;) {&lt;br /&gt;            &lt;span class="pl-v" style="box-sizing: border-box; color: #df5000;"&gt;this&lt;/span&gt;&lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;.&lt;/span&gt;someOtherClass &lt;span class="pl-k" style="box-sizing: border-box; color: #a71d5d;"&gt;=&lt;/span&gt; someOtherClass&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="pl-s" style="box-sizing: border-box; color: #a71d5d;"&gt;class&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;SomeOtherClass&lt;/span&gt; {&lt;br /&gt;        &lt;span class="pl-st" style="box-sizing: border-box; color: #a71d5d;"&gt;String&lt;/span&gt; &lt;span class="pl-en" style="box-sizing: border-box; color: #795da3;"&gt;someMethod&lt;/span&gt;() {&lt;br /&gt;            &lt;span class="pl-s1" style="box-sizing: border-box; color: #df5000;"&gt;&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;Some other class&lt;span class="pl-pds" style="box-sizing: border-box;"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;Disclaimer&lt;/h2&gt;Remember that if you're using this extension as a way to hack your way through an awful design of your application then you should do your best to fix your code in the first place! You've been warned ;)</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/7259908936996599118/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2014/12/spock-subject-collaborators-extension.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/7259908936996599118"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/7259908936996599118"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2014/12/spock-subject-collaborators-extension.html" title="Spock Subject Collaborators Extension 1.0.1 released!"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-3010322251244906474</id>
  <published>2015-10-16T08:58:00.000-07:00</published>
  <updated>2015-10-16T13:08:12.131-07:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Development"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Good practices"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Quality"/>
  <title type="text">Business value gone wild</title>
  <content type="html">This blog post will not be about microservices, Spring or any technology that I've already talked about in &lt;a href="http://toomuchcoding.blogspot.com/"&gt;Too much coding blog&lt;/a&gt;. This time it will be my opinion on two subjects&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the more and more frequent "it's not my problem" approach in the IT industry running in a corporation.&amp;nbsp;&lt;/li&gt;&lt;li&gt;the "business value" frenzy of the management&lt;/li&gt;&lt;/ul&gt;This article is definitely not a motivational one. Quite frankly, you might get depressed after reading it. Nonetheless, it's better to know how really corporate life sometimes looks like rather than get hit in the face.&lt;br /&gt;&lt;br /&gt;TL;DR : the more you care in a corporate enterprise the worse for you. Eventually some developers will hate your ideas of quality and standards because they are paid to tap the keys. Your management will fire you for not bringing "business value". The faster you embrace it, the better for you - you'll start searching for a new job sooner.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;div&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;/div&gt;&lt;h4&gt;Features are not only functionalities&lt;/h4&gt;&lt;div&gt;&lt;br /&gt;Let's define some facts: IT is paid by the business. Business wants features. IT has to deliver features to gain money. That's a fact and our reality. Even if you hear from your managers that "cleaning technical debt is a necessity" what they really think is:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-htlLzbCyZro/Vh6fjoKG5iI/AAAAAAABILw/_zk7wkxqPoU/s1600/technical_debt.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="224" src="http://4.bp.blogspot.com/-htlLzbCyZro/Vh6fjoKG5iI/AAAAAAABILw/_zk7wkxqPoU/s320/technical_debt.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And actually that's not bizarre - business has no understanding of the technical aspects of the IT work. Here we can discern two types of business people:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;they don't get technical aspects, but they trust the engineers&lt;/li&gt;&lt;li&gt;they don't care about technical aspects and they won't listen to any of the programmers' advice&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;If you have the latter business people then most likely you're in this situation:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-LwS3CWbA0b0/Vh6qyT0FmbI/AAAAAAABIMM/1xY8oezZhFk/s1600/before.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-LwS3CWbA0b0/Vh6qyT0FmbI/AAAAAAABIMM/1xY8oezZhFk/s1600/before.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;and actually you should be doing such a shift:&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-TCHAm6Q0yT0/Vh6oKJF3mLI/AAAAAAABIMA/pjQoINeQ35c/s1600/cable_change.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="210" src="http://1.bp.blogspot.com/-TCHAm6Q0yT0/Vh6oKJF3mLI/AAAAAAABIMA/pjQoINeQ35c/s320/cable_change.jpg" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;http://www.technalytical.com/2012/04/aesthetical-cable-management-before-and.html&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In order to grow faster. What makes me really surprised that continuously the business picks the first option - just add more mess to the existing one without thinking of the consequences.&lt;br /&gt;&lt;br /&gt;Now for the tricky part. Now change the word "business" to "developer" and everything is still valid.&lt;br /&gt;&lt;br /&gt;"Delivering a feature" it's not only coding some functions in whatever language you are using. It's not taking a keyboard and pressing the keys to make the functionality work. If this is your approach then you're a key tapper. Tapping keys to get things done.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-N9ueTp3dNhI/Vh6sGeO-OUI/AAAAAAABIMY/ZTgNPN9Pras/s1600/dunno.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="231" src="http://4.bp.blogspot.com/-N9ueTp3dNhI/Vh6sGeO-OUI/AAAAAAABIMY/ZTgNPN9Pras/s320/dunno.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Programming is more than tapping keys&lt;/h4&gt;&lt;div&gt;&lt;br /&gt;I hope that nobody feels offended by this term "key tapper". I'm not trying to be offensive - I'm just describing what I saw in my career. In my opinion there are a couple of different types of IT guys:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;there are people for whom programming is a passion. They put a lot of energy and effort to make things better&lt;/li&gt;&lt;li&gt;there are also IT guys for whom programming isn't a passion, but still put (sucessfully) &amp;nbsp;a lot of energy and effort in order to make things better just because they want to be honest and valuable employees (thanks Michal Szostek)&lt;/li&gt;&lt;li&gt;there are people for whom programming is not a passion and they just come to work and tap the keys&amp;nbsp;&lt;/li&gt;&lt;li&gt;there are others who would love to do stuff properly but the business is breathing at their necks to do stuff in a bad way because the "deadlines are coming".&lt;/li&gt;&lt;li&gt;there are positions where people last. They come and simulate work. They lie, talk a lot and delegate work so that there is some impression of progress&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Regardless of the position, if one doesn't focus on quality and just taps in the functionality then:&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;even if he provides the business feature it might badly influence other people (introducing coupling between modules, breaking encapsulation etc.)&lt;/li&gt;&lt;li&gt;the functionality might be written in such a way that you will result in the global timeout of the whole system&lt;/li&gt;&lt;li&gt;you're not thinking about the company standards (&lt;a href="http://www.slideshare.net/MarcinGrzejszczak/4financeit-microservices-092015-kaunas-jug/87?src=clipshare"&gt;passing of CorrelationID for instance&lt;/a&gt;), that will break the approaches set in the company. This in effect will lead in increased time needed to provide support&lt;/li&gt;&lt;li&gt;writing the next functionality will take more time than the previous one&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Even though it seems to be common knowledge, you can far too often hear something like this:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.&lt;/blockquote&gt;Now imagine that you join a project which is full of such developers and you're asked to fix a bug:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-c6LCeYh8sHs/Vh7A-E-ZjaI/AAAAAAABIM0/gelqAg9YKU0/s1600/new_guy.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="http://2.bp.blogspot.com/-c6LCeYh8sHs/Vh7A-E-ZjaI/AAAAAAABIM0/gelqAg9YKU0/s400/new_guy.png" width="267" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Technical changes are not bringing money&lt;/h4&gt;&lt;div&gt;&lt;br /&gt;We have to educate both the business and the developers: writing features and providing business value is actually a sum of a coded and tested functionality with technical advancement. What are those? Code refactoring, introduction of new approaches, migrations from one way of doing things in one way to another. For example:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;version control system (e.g. SVN to Git)&lt;/li&gt;&lt;li&gt;build system (e.g Maven to Gradle)&lt;/li&gt;&lt;li&gt;UI framework (e.g. Vaadin to AngularJS)&lt;/li&gt;&lt;li&gt;library versions (e.g. Spring 3.0 to Spring 4.0)&lt;/li&gt;&lt;li&gt;going from deployment to application servers to embedded servlet containers (e.g. Glassifsh to embedded JAR with Jetty)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Why do we want these changes to happen? Because they ease our work and enforce standards. Why are standards important?&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;i&gt;"Pick a plug they said, it's gonna be easy, they said"&lt;/i&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-StjBYB5gZOE/Vh7DWYGKYLI/AAAAAAABINI/7027zJf7kN8/s1600/plugs.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="196" src="http://4.bp.blogspot.com/-StjBYB5gZOE/Vh7DWYGKYLI/AAAAAAABINI/7027zJf7kN8/s400/plugs.jpg" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;https://abdulinnewzealand.wordpress.com/2012/12/03/new-things-from-my-visit-to-new-zeland/&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;If every team in the company uses different:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;libraries&lt;/li&gt;&lt;li&gt;approach to testing&lt;/li&gt;&lt;li&gt;approach to deployment&lt;/li&gt;&lt;li&gt;approach to running the application&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Then you can tell your business that they will pay A LOT of money for the support. The learning curve will be gigantic for the newcomers. But hey! It's better to code a new functionality in the meantime right?&lt;br /&gt;&lt;br /&gt;Seemingly all the developers would like to see the effect of those migrations and standardization. Everybody wants this to happen but who should actually do it? When asked about this you might hear:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.&lt;/blockquote&gt;&lt;div&gt;How can we solve this?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Stupid idea&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Introduce the following flow of working in IT:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;the "coding team" writes a business feature and pushes it to master&lt;/li&gt;&lt;li&gt;the "clean code team" rewrites the code according to the clean code standards&lt;/li&gt;&lt;li&gt;the "technical team" introduces the technical standards for the written piece of code&lt;/li&gt;&lt;li&gt;the "migration team" migrates the code from one approach to another&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The outcome of the cooperation could look like this:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-8PyO94v8WnQ/Vh7FQYoj_TI/AAAAAAABINU/NfuIHRnzdZQ/s1600/bathroom.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://2.bp.blogspot.com/-8PyO94v8WnQ/Vh7FQYoj_TI/AAAAAAABINU/NfuIHRnzdZQ/s320/bathroom.jpg" width="247" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Good idea&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Introduce... caring! Invest a lot of time and effort in educating business and developers that you have to take care of the code quality. Imagine where your company would be if every programmer would focus for 1 hour per day to manage the technical debt. If your managers don't understand the importance of clearing that debt, then you should consider changing jobs cause it's going to get worse with every single push to the repo.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4&gt;You are an engineer!&lt;/h4&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-pGZjd5My6EU/Vh7LQrT18oI/AAAAAAABINg/ku5r63yr3oY/s1600/engineer.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://2.bp.blogspot.com/-pGZjd5My6EU/Vh7LQrT18oI/AAAAAAABINg/ku5r63yr3oY/s320/engineer.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Developing a feature is not just typing in code that compiles and makes the tests pass. Maybe the constant breathing of the project manager on your neck made you forget about this but you are an engineer. Following &lt;a href="https://en.wikipedia.org/wiki/Engineer"&gt;Wikipedia&lt;/a&gt;:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;An&amp;nbsp;&lt;/span&gt;&lt;b style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;engineer&lt;/b&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;&amp;nbsp;is a&amp;nbsp;&lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Profession" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Profession"&gt;professional&lt;/a&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;&amp;nbsp;practitioner of&amp;nbsp;&lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Engineering" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Engineering"&gt;engineering&lt;/a&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;, concerned with applying&amp;nbsp;&lt;/span&gt;&lt;a class="mw-redirect" href="https://en.wikipedia.org/wiki/Scientific_knowledge" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Scientific knowledge"&gt;scientific knowledge&lt;/a&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;,&amp;nbsp;&lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Mathematics" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Mathematics"&gt;mathematics&lt;/a&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;, and&amp;nbsp;&lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Ingenuity" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Ingenuity"&gt;ingenuity&lt;/a&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;&amp;nbsp;to develop solutions for technical, societal and commercial problems. Engineers design materials, structures, and systems while considering the limitations imposed by practicality, regulation, safety, and cost.&lt;/span&gt;&lt;sup class="reference" id="cite_ref-bls_1-0" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"&gt;&lt;a href="https://en.wikipedia.org/wiki/Engineer#cite_note-bls-1" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;sup class="reference" id="cite_ref-nspe_2-0" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"&gt;&lt;a href="https://en.wikipedia.org/wiki/Engineer#cite_note-nspe-2" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;"&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;&amp;nbsp;The word&amp;nbsp;&lt;/span&gt;&lt;i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;engineer&lt;/i&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;&amp;nbsp;is derived from the&amp;nbsp;&lt;/span&gt;&lt;a href="https://en.wikipedia.org/wiki/Latin" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Latin"&gt;Latin&lt;/a&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;&amp;nbsp;words&amp;nbsp;&lt;/span&gt;&lt;i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;ingeniare&lt;/i&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;&amp;nbsp;("to contrive, devise") and&amp;nbsp;&lt;/span&gt;&lt;i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;ingenium&lt;/i&gt;&lt;span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;"&gt;("cleverness").&lt;/span&gt;&lt;sup class="reference" id="cite_ref-3" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"&gt;&lt;a href="https://en.wikipedia.org/wiki/Engineer#cite_note-3" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;"&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;sup class="reference" id="cite_ref-4" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"&gt;&lt;a href="https://en.wikipedia.org/wiki/Engineer#cite_note-4" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;"&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/blockquote&gt;&lt;div&gt;So other than telling one again:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.&lt;/blockquote&gt;&lt;div&gt;you should consider all of the technical aspect before even writing a single line of code. Then you should say:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;My schedule is tight but I'll fix the issues that you suggested. I understand that delivering business value means writing a feature and making the technical progress as a company. This is what I'm paid for and what you are referring to is part of my duties.&amp;nbsp;&lt;/blockquote&gt;Unfortunately there is one problem with this approach...&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Are you an engineer that has a say? You're gonna get fired!&lt;/h4&gt;&lt;br /&gt;Yes, if you start caring in a corporate enterprise you will eventually get fired. Business prefers people who nod their heads and agree to everything. After some time quality becomes a burden for the management. It becomes a cost that doesn't bring "business value".&lt;br /&gt;&lt;br /&gt;So you will start fighting for the quality because this is the very meaning of your programming life. Deliver quality software that satisfies the business requirements, bearing in mind technical consequences. You will defend your developers against the growing pressure from the business to deliver features at a larger pace. The corporate axe will come closer to your neck with every single fight to defend the very meaning of being an engineer.&lt;br /&gt;&lt;br /&gt;In the meantime your fellow developers that don't agree with your permanent interference in the key tapping due to buzzwords like "resilience", "fail-fast", "latency" or "tests" will continue to dislike you. They will constantly show their lack of support to what you're doing. Their mediocrity and lack of willingness to stand to what they believe in will allow them to remain in the company for years to come.&lt;br /&gt;&lt;br /&gt;Then one day you will have to pack your stuff in a box and you will be escorted out of the office because you will get fired. The reason will be simple: "not delivering business value".&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-baNDD9nKPtQ/Vh7QTfvgBTI/AAAAAAABIN4/p1xdBPOtkrU/s1600/guillotine.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="230" src="http://4.bp.blogspot.com/-baNDD9nKPtQ/Vh7QTfvgBTI/AAAAAAABIN4/p1xdBPOtkrU/s320/guillotine.gif" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;But... don't worry! That's actually good. Someone is doing you a favor! In the long run you will definitely profit from being fired. You will gain respect because you stood for your values. You will be able to stand in the mirror, look at yourself and say that you've done everything your power to do things properly with high quality.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Epilogue&lt;/h4&gt;&lt;div class="" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="" style="clear: both; text-align: left;"&gt;Hopefully my apocalyptic vision is too harsh but that's what I see when talking to people in the industry. There is a light at the end of the tunnel though (and it's not a freight train).&amp;nbsp;&lt;/div&gt;&lt;div class="" style="clear: both; text-align: left;"&gt;There are companies that value good engineers and value quality. If you get fired (or you're getting close to that) just file a CV there. You can be shocked that the very sense of caring and eagerness to learn drastically boosts your chances of getting hired.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-oFjV8za2yWM/Vh7M1xlgLRI/AAAAAAABINs/_yxMM4Gp_Vw/s1600/the_end.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="212" src="http://1.bp.blogspot.com/-oFjV8za2yWM/Vh7M1xlgLRI/AAAAAAABINs/_yxMM4Gp_Vw/s320/the_end.gif" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Additional reading&lt;/h4&gt;&lt;div class="" style="clear: both;"&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://medium.com/@bryanedds/living-in-the-age-of-software-fuckery-8859f81ca877"&gt;Living in the age of software fuckery&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/"&gt;Don't call yourself a programmer&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/3010322251244906474/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2015/10/business-value-gone-wild.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3010322251244906474"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/3010322251244906474"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2015/10/business-value-gone-wild.html" title="Business value gone wild"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-htlLzbCyZro/Vh6fjoKG5iI/AAAAAAABILw/_zk7wkxqPoU/s72-c/technical_debt.jpg" height="72" width="72"/>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry><entry xmlns="http://www.w3.org/2005/Atom" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
  <id>tag:blogger.com,1999:blog-5624077120549380029.post-2120694426421464603</id>
  <published>2016-01-04T09:28:00.001-08:00</published>
  <updated>2016-01-04T09:28:21.387-08:00</updated>
  <category scheme="http://www.blogger.com/atom/ns#" term="Pivotal"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="Spring"/>
  <category scheme="http://www.blogger.com/atom/ns#" term="spring-cloud"/>
  <title type="text">Post on Spring blog</title>
  <content type="html">Hi!&lt;br /&gt;&lt;br /&gt;Since December I'm working for Pivotal and the Spring Cloud team. I've just posted my first blog post on the Spring blog. Check it out!&lt;br /&gt;&lt;br /&gt;&lt;a href="https://spring.io/blog/2016/01/04/testing-spring-cloud-projects"&gt;Testing Spring Cloud Projects&lt;/a&gt;</content>
  <link rel="replies" type="application/atom+xml" href="http://toomuchcoding.blogspot.com/feeds/2120694426421464603/comments/default" title="Post Comments"/>
  <link rel="replies" type="text/html" href="http://toomuchcoding.blogspot.com/2016/01/post-on-spring-blog.html#comment-form" title="0 Comments"/>
  <link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/2120694426421464603"/>
  <link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/5624077120549380029/posts/default/2120694426421464603"/>
  <link rel="alternate" type="text/html" href="http://toomuchcoding.blogspot.com/2016/01/post-on-spring-blog.html" title="Post on Spring blog"/>
  <author>
    <name>Marcin Grzejszczak</name>
    <uri>https://plus.google.com/108408840893580782990</uri>
    <email>noreply@blogger.com</email>
    <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="32" height="32" src="//lh6.googleusercontent.com/-lk82UqvDQDY/AAAAAAAAAAI/AAAAAAABGeU/_sQTYVrQJ3U/s512-c/photo.jpg"/>
  </author>
  <thr:total>0</thr:total>
  <gd:extendedProperty name="commentSource" value="1"/>
  <gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/>
</entry></feed>
